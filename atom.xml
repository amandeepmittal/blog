<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aman Mittal&#39;s Blog</title>
  <subtitle>Node.js Blog</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://amandeepmittal.github.io/blog/"/>
  <updated>2017-06-14T19:07:41.000Z</updated>
  <id>http://amandeepmittal.github.io/blog/</id>
  
  <author>
    <name>Aman Mittal</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How to make a Twitter Bot with NodeJS</title>
    <link href="http://amandeepmittal.github.io/blog/2017/06/15/How-to-make-a-Twitter-Bot-with-NodeJS/"/>
    <id>http://amandeepmittal.github.io/blog/2017/06/15/How-to-make-a-Twitter-Bot-with-NodeJS/</id>
    <published>2017-06-14T19:01:35.000Z</published>
    <updated>2017-06-14T19:07:41.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn-images-1.medium.com/max/800/1*N32NxcCDKDDjlc56ghcsaA.jpeg" alt=""><br>Earlier this week, <a href="https://community.risingstack.com/" target="_blank" rel="external">Rising Stack Community</a> published the second of tutorial on Building a Twitter Bot with NodeJS. Some of you may have read the first part here <a href="https://hackernoon.com/create-a-simple-twitter-bot-with-node-js-5b14eb006c08#.43u5qmvts" target="_blank" rel="external">on Medium (published by Hackernoon)</a> while others might have gone through the first part of the guide on <a href="https://community.risingstack.com/node-js-twitter-bot-tutorial/" target="_blank" rel="external">RisingStack Community</a>.<br><a id="more"></a></p>
<h2 id="Part-I-Setup-amp-Getting-Ready"><a href="#Part-I-Setup-amp-Getting-Ready" class="headerlink" title="Part I: Setup &amp; Getting Ready"></a>Part I: Setup &amp; Getting Ready</h2><p>The idea of creating a Twitter Bot started in the back of my head as I was learning Nodejs a few months back and wanted to stay updated with happenings in the community. Nodejs community has grown enormously in past year and to keep up with that you need tools or browser tabs to do so.</p>
<p>I built a simple Twitter Bot in Nodejs (which still works, <a href="http://twitter.com/nodejstweet" target="_blank" rel="external">link here</a>)that fetches me tweets using general purpose #hashtags related to technologies such as #Nodejs #AngularJS #Mongodb &amp;c.</p>
<p>In Part 1, I discuss of starting out building a simple Twitter Bot that retweets and favorite tweets based on the query used with setting up this Twitter application and getting access. To persistent communication with Twitter API, I use npm module called <a href="https://www.npmjs.com/package/twit" target="_blank" rel="external">twit</a> which has a very good documentation to refer to and offer various methods to communicate to <a href="https://dev.twitter.com/docs" target="_blank" rel="external">Twitter API</a>.</p>
<p><img src="https://cdn-images-1.medium.com/max/800/1*l4nVQSFz3E3CmjD-g965pw.png" alt=""></p>
<h2 id="Part-2-Advance-Usage"><a href="#Part-2-Advance-Usage" class="headerlink" title="Part 2: Advance Usage"></a>Part 2: Advance Usage</h2><p>The second part of the guide extends the usability of the Twitter bot by making our Bot interact with user (at a very high level) or in <strong>Twitter terms, to tweet back to any user who follows the bot</strong>. This is done by using <a href="https://dev.twitter.com/streaming/overview" target="_blank" rel="external">Twitter’s Streaming API</a>.</p>
<p><strong>Here is the link to <a href="https://community.risingstack.com/how-to-make-a-twitter-bot-with-node-js/" target="_blank" rel="external">Second Part of Building a Twitter Bot with NodeJS</a></strong>.</p>
<p>I received positive feedback by the people who followed the <a href="https://hackernoon.com/create-a-simple-twitter-bot-with-node-js-5b14eb006c08#.5qwkbly78" target="_blank" rel="external">first part of the guide</a> and that encouraged me to write a <a href="https://community.risingstack.com/how-to-make-a-twitter-bot-with-node-js/" target="_blank" rel="external">second part</a>. I hope you’ll have fun with it, since programming in NodeJS as a platform is really fun from a developer’s point of view, and a very pragmatic approach, I would say.</p>
<p>I am looking forward to grab a glimpse of YOUR Twitter Bot. If you are working on it or have already published it on Twitter, don’t forget to send me a link with Twitter handler of your bot in the comments below or you can add your Twitter Bot to this Nodejs Twitter Bot resource Github repo <a href="https://github.com/amandeepmittal/awesome-twitter-bots" target="_blank" rel="external">here</a>.</p>
<hr>
<p>Originally published on <a href="https://chatbotslife.com/how-to-make-a-twitter-bot-with-nodejs-d5cb04fdbf97" target="_blank" rel="external">ChatBotsLife.com</a></p>
<p><strong><a href="https://upscri.be/e51a31/" target="_blank" rel="external">Subscribe</a> this Blog for more on JavaScript/Nodejs.</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*N32NxcCDKDDjlc56ghcsaA.jpeg&quot; alt=&quot;&quot;&gt;&lt;br&gt;Earlier this week, &lt;a href=&quot;https://community.risingstack.com/&quot;&gt;Rising Stack Community&lt;/a&gt; published the second of tutorial on Building a Twitter Bot with NodeJS. Some of you may have read the first part here &lt;a href=&quot;https://hackernoon.com/create-a-simple-twitter-bot-with-node-js-5b14eb006c08#.43u5qmvts&quot;&gt;on Medium (published by Hackernoon)&lt;/a&gt; while others might have gone through the first part of the guide on &lt;a href=&quot;https://community.risingstack.com/node-js-twitter-bot-tutorial/&quot;&gt;RisingStack Community&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
      <category term="nodejs" scheme="http://amandeepmittal.github.io/blog/tags/nodejs/"/>
    
      <category term="bots" scheme="http://amandeepmittal.github.io/blog/tags/bots/"/>
    
  </entry>
  
  <entry>
    <title>Using Bower with Heroku</title>
    <link href="http://amandeepmittal.github.io/blog/2017/06/10/Using-Bower-with-Heroku/"/>
    <id>http://amandeepmittal.github.io/blog/2017/06/10/Using-Bower-with-Heroku/</id>
    <published>2017-06-10T17:37:35.000Z</published>
    <updated>2017-06-10T17:37:35.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn-images-1.medium.com/max/720/1*zS_KNyajgV3amVbtWhsZaA.jpeg" alt=""><br>Yes, I use <a href="http://bower.io/" target="_blank" rel="external">Bower</a> to maintain front-end dependencies (exlusively with AngularJS), mostly for my side projects. Whatever you say, Bower is good and I am too anxious to mess with npm dependencies for front-end development. Plus, I feel that maintaining front-end dependencies with Bower helps in keeping my application’s skeleton clean.</p>
<a id="more"></a>
<p>So for last two of my projects, I have been using <a href="http://heroku.com/" target="_blank" rel="external">Heroku</a> for deployment. Since I am maintaining front-end dependencies using Bower, I went through <a href="https://devcenter.heroku.com/articles/buildpacks" target="_blank" rel="external">this article</a> which is about generating buildpacks on Heroku. I find generating buildpacks adds unnecessary complexity in the process of application deployment, at least for rapid prototyping. Thus, I choose a different path. Adding Bower as an npm dependency seems an easy process and doesn’t add any kind of complexity. I find it’s great only if you are using Bower for rapid prototyping JavaScript applications.</p>
<p>After you are done with building your application, all you have to do is add Bower as an npm dependency in package.json file and then add a script under npm scripts to execute a command that will install bower dependencies before the application is deployed on Heroku.</p>
<p>Bower as dependency in package.json :</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">"dependencies": &#123;</div><div class="line">  "bower": "1.8.0" </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>And then add a <code>postinstall</code> command in npm <code>scripts</code>: </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">"scripts": &#123;</div><div class="line">  "postinstall": "./node_modules/bower/bin/bower install" </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>You can read more about <a href="https://devcenter.heroku.com/articles/nodejs-support#customizing-the-build-process" target="_blank" rel="external">customizing Heroku Build Process here</a>.</p>
<hr>
<p> <em>See you on <a href="https://twitter.com/amanhimself" target="_blank" rel="external">Twitter</a></em></p>
<p> <em>Originally Publisheda at Medium.com on Dec, 29, 2016.</em></p>
<hr>
<p> <strong><a href="https://upscri.be/e51a31/" target="_blank" rel="external">Subscribe</a> my Blog for more on JavaScript/Nodejs/Ionic.</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/720/1*zS_KNyajgV3amVbtWhsZaA.jpeg&quot; alt=&quot;&quot;&gt;&lt;br&gt;Yes, I use &lt;a href=&quot;http://bower.io/&quot;&gt;Bower&lt;/a&gt; to maintain front-end dependencies (exlusively with AngularJS), mostly for my side projects. Whatever you say, Bower is good and I am too anxious to mess with npm dependencies for front-end development. Plus, I feel that maintaining front-end dependencies with Bower helps in keeping my application’s skeleton clean.&lt;/p&gt;
    
    </summary>
    
    
      <category term="bower" scheme="http://amandeepmittal.github.io/blog/tags/bower/"/>
    
      <category term="heroku" scheme="http://amandeepmittal.github.io/blog/tags/heroku/"/>
    
  </entry>
  
  <entry>
    <title>Remove node_modules recursively</title>
    <link href="http://amandeepmittal.github.io/blog/2017/06/06/Remove-node-modules-recursively/"/>
    <id>http://amandeepmittal.github.io/blog/2017/06/06/Remove-node-modules-recursively/</id>
    <published>2017-06-06T12:49:48.000Z</published>
    <updated>2017-06-08T12:03:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/2UOMNka.png" alt=""></p>
<p><code>node_modules</code> tend to take a lot of space in your local system especially if you work with Node.js or related frameworks (such as client side frameworks: React or Angular). They are the part and parcel of modern day JavaScript applications and workflow.</p>
<a id="more"></a>
<p>Each day <code>npm</code> registry is getting around <a href="https://twitter.com/seldo/status/864298310785310720" target="_blank" rel="external">350 million downloads</a> daily, at the current time of writing this post. That’s almost 2.2 billion downloads per week and you can take the calculation further.</p>
<p>Here’s Laurie Voss <a href="https://twitter.com/seldo" target="_blank" rel="external">(@seldo)</a> <a href="https://twitter.com/seldo/status/864298310785310720" target="_blank" rel="external">tweet</a>, sharing the aforementioned details:</p>
<p><img src="https://pbs.twimg.com/media/C_6an0cUAAAUbul.jpg" alt=""></p>
<p>Nonetheless, after all your efforts are paid of and everything is deployed and is over cloud, either Github or some deployment service you or your client prefers, I think it will be generous to remove <code>node_modules</code> that take useful space on our local machines (especially, Mac users with limited GigaBytes of SSD).</p>
<p>There’s a simple command that you can run in your terminal either in a folder or from the root.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . -name &quot;node_modules&quot; -exec rm -rf &apos;&#123;&#125;&apos; +</div></pre></td></tr></table></figure>
<p>This will delete <code>node_modules</code> folder in every local repository/directory that’s on your system so take precaution or exclude those projects that you are currently working on.</p>
<p>However, don’t panic. Everything can be back to normal just by going into the project’s directory and running package installing command:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure>
<p>I have used this command earlier today it saved me up to 9 GB of space from local system over several projects.</p>
<p>I even replaced <code>node_modules</code> with <code>bower_components</code> to do the same thing:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . -name &quot;bower_components&quot; -exec rm -rf &apos;&#123;&#125;&apos; +</div></pre></td></tr></table></figure>
<hr>
<p><strong><a href="https://upscri.be/e51a31/" target="_blank" rel="external">Subscribe</a> my Blog for more on JavaScript/Nodejs/Ionic.</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/2UOMNka.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;node_modules&lt;/code&gt; tend to take a lot of space in your local system especially if you work with Node.js or related frameworks (such as client side frameworks: React or Angular). They are the part and parcel of modern day JavaScript applications and workflow.&lt;/p&gt;
    
    </summary>
    
    
      <category term="tips" scheme="http://amandeepmittal.github.io/blog/tags/tips/"/>
    
      <category term="nodejs" scheme="http://amandeepmittal.github.io/blog/tags/nodejs/"/>
    
      <category term="npm" scheme="http://amandeepmittal.github.io/blog/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>What&#39;s new in npm 5</title>
    <link href="http://amandeepmittal.github.io/blog/2017/06/02/What-s-new-in-npm-5/"/>
    <id>http://amandeepmittal.github.io/blog/2017/06/02/What-s-new-in-npm-5/</id>
    <published>2017-06-02T12:37:17.000Z</published>
    <updated>2017-06-08T11:26:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/FTuFdex.png" alt=""></p>
<p>Last month, in the very last week, <a href="https://npmjs.com" target="_blank" rel="external">npm</a> announced the new major release for the JavaScript package manager. <strong>5.0.0</strong>, hopefully, will be shipped with upcoming version of <a href="https://nodejs.org/en/" target="_blank" rel="external">Nodejs</a> as well. It seems a big step towards providing better tooling with significantly improved performance as quite a lot of developers made a switch to yarn, just because it could download the packages from the registery at a faster rate. However, this point is debatable, so let’s not get into it.</p>
<a id="more"></a>
<p>Some of the major changes which I want to hightlight in this article and am eagerly looking forward to are:</p>
<ul>
<li><code>npm will --save</code> is available by default now. See the <a href="https://twitter.com/maybekatz/status/859229741676625920" target="_blank" rel="external">demo</a> with your own eyes.</li>
<li>Running <code>npm</code> while offline will no longer insist on retrying network requests. npm will now immediately fall back to cache if possible, or fail.</li>
<li><code>--cache-min</code> and <code>--cache-max</code> have been deprecated, so, existing npm caches will no longer be used.</li>
<li>A new <code>--prefer-offline</code> option will make npm skip any conditional requests for stale cache data, and only hit the network if something is missing from the cache.</li>
<li>A new <code>--prefer-online</code> option that will force npm to revalidate cached data, ignoring any staleness checks, and refreshing the cache with revalidated, fresh data.</li>
<li>A new <code>--offline</code> option will force npm to use the cache or exit. It will error with an <code>ENOTCACHED</code> code if anything it tries to install isn’t already in the cache.</li>
<li>A standardised lockfile feature is available by default and will be for cross-package-manager compatibility (<code>package-lock.json</code>), and a new format and semantics for shrinkwrap.</li>
<li>Downloads for large packages are streamed in and out of disk. npm is now able to install packages of any size without running out of memory.</li>
<li>Last, it’s a bit faster. <a href="https://twitter.com/maybekatz/status/865393382260056064" target="_blank" rel="external">Demo</a></li>
</ul>
<p>Hopefully, they update their docs quickly with this new update and more users like me will be able to switch or access much of these key features. For detailed look into npm5’s features have a look at their <a href="http://blog.npmjs.org/post/161081169345/v500" target="_blank" rel="external">official blog post</a> in which they have listed every other breaking change coming with the new release.</p>
<p>To start using the latest version of npm, you can in your terminal window or preferable shell:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">npm install -g npm@next</div><div class="line"></div><div class="line"># Or</div><div class="line"></div><div class="line">npm install -g npm@latest</div></pre></td></tr></table></figure>
<hr>
<p><strong><a href="https://upscri.be/e51a31/" target="_blank" rel="external">Subscribe</a> my Blog for more on JavaScript/Nodejs/Ionic.</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/FTuFdex.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Last month, in the very last week, &lt;a href=&quot;https://npmjs.com&quot;&gt;npm&lt;/a&gt; announced the new major release for the JavaScript package manager. &lt;strong&gt;5.0.0&lt;/strong&gt;, hopefully, will be shipped with upcoming version of &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Nodejs&lt;/a&gt; as well. It seems a big step towards providing better tooling with significantly improved performance as quite a lot of developers made a switch to yarn, just because it could download the packages from the registery at a faster rate. However, this point is debatable, so let’s not get into it.&lt;/p&gt;
    
    </summary>
    
    
      <category term="tips" scheme="http://amandeepmittal.github.io/blog/tags/tips/"/>
    
      <category term="npm" scheme="http://amandeepmittal.github.io/blog/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>Getting Started with Sequelize for Nodejs Applications</title>
    <link href="http://amandeepmittal.github.io/blog/2017/05/30/Getting-Started-with-Sequelize-for-Nodejs-Applications/"/>
    <id>http://amandeepmittal.github.io/blog/2017/05/30/Getting-Started-with-Sequelize-for-Nodejs-Applications/</id>
    <published>2017-05-30T09:37:43.000Z</published>
    <updated>2017-06-12T08:29:42.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/jIaEOEh.png" alt=""></p>
<h2 id="Introduction-to-ORM"><a href="#Introduction-to-ORM" class="headerlink" title="Introduction to ORM"></a>Introduction to ORM</h2><p>ORM or Object Relation Mapping is a process of mapping between objects and relation database systems. An ORM acts like an interface between two system. ORM provide advantages for developers from basic ones like saving time and effort and rather focusing on business logic. The code is robust instead of redundant. ORM helps in managing queries for multiple tables in an effective manner. Lastly, an ORM (like <a href="http://docs.sequelizejs.com/en/v3/" target="_blank" rel="external">sequelize</a>) is capable to connect with different databases (which comes in handy when switching from one database to another).</p>
<a id="more"></a>
<h2 id="Getting-Started-with-Sequelize"><a href="#Getting-Started-with-Sequelize" class="headerlink" title="Getting Started with Sequelize"></a>Getting Started with Sequelize</h2><p><a href="https://github.com/sequelize/sequelize" target="_blank" rel="external">Sequelize</a> is a promise-based ORM for Node.js. Sequelize is easy to learn and has dozens of cool features like synchronization, association, validation, etc. It also has support for PostgreSQL, MySQL, MariaDB, SQLite, and MSSQL. I am assuming you have some form of SQL database service started on your machine. I am currently using MySQL.</p>
<h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><p>Sequelize is available via npm.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ npm install --save sequelize</div><div class="line"></div><div class="line"># And one of the following:</div><div class="line">$ npm install --save pg pg-hstore</div><div class="line">$ npm install --save mysql // For both mysql and mariadb dialects</div><div class="line">$ npm install --save sqlite3</div><div class="line">$ npm install --save tedious // MSSQL</div></pre></td></tr></table></figure>
<h3 id="Setting-up-a-Connection"><a href="#Setting-up-a-Connection" class="headerlink" title="Setting up a Connection"></a>Setting up a Connection</h3><p>Sequelize does setup a connection between the rest api/application and your SQL database. To setup basic connection between the two:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> sequelize = <span class="keyword">new</span> Sequelize(<span class="string">'database'</span>, <span class="string">'username'</span>, <span class="string">'password'</span>, &#123;</div><div class="line">  <span class="attr">host</span>: <span class="string">'localhost'</span>,</div><div class="line">  <span class="attr">dialect</span>: <span class="string">'mysql'</span>|<span class="string">'mariadb'</span>|<span class="string">'sqlite'</span>|<span class="string">'postgres'</span>|<span class="string">'mssql'</span>,   <span class="comment">//choose anyone between them</span></div><div class="line"></div><div class="line">  <span class="comment">// To create a pool of connections</span></div><div class="line">  pool: &#123;</div><div class="line">    <span class="attr">max</span>: <span class="number">5</span>,</div><div class="line">    <span class="attr">min</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">idle</span>: <span class="number">10000</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// For SQLite only</span></div><div class="line">  storage: <span class="string">'path/to/database.sqlite'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="How-do-I-setup-my-Sequelize-Connection"><a href="#How-do-I-setup-my-Sequelize-Connection" class="headerlink" title="How do I setup my Sequelize Connection?"></a>How do I setup my Sequelize Connection?</h3><p>For the sake brevity, I like to divide code into modules. After all, the Unix philosophy of <a href="https://amandeepmittal.github.io/blog/2017/04/05/The-Node-Way-Philosophy-of-a-Platform/"><em>one  program/module should do one thing</em></a> is major part of the philosophy behind writing code in JavaScript (and using Node.js as a server side platform) these days.</p>
<p>I start with <code>config.json</code>/<code>config.js</code> file in the root of my application/api folder in which I define the general constraints needed to setup the connection with database:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"development"</span>: &#123;</div><div class="line">    <span class="attr">"username"</span>: <span class="string">"root"</span>,</div><div class="line">    <span class="attr">"password"</span>: <span class="string">"root"</span>,</div><div class="line">    <span class="attr">"database"</span>: <span class="string">"articles"</span>,</div><div class="line">    <span class="attr">"host"</span>: <span class="string">"localhost"</span>,</div><div class="line">    <span class="attr">"dialect"</span>: <span class="string">"mysql"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"test"</span>: &#123;</div><div class="line">    <span class="attr">"username"</span>: <span class="string">"root"</span>,</div><div class="line">    <span class="attr">"password"</span>: <span class="string">"root"</span>,</div><div class="line">	<span class="attr">"database"</span>: <span class="string">"articles"</span>,</div><div class="line">    <span class="attr">"host"</span>: <span class="string">"127.0.0.1"</span>,</div><div class="line">    <span class="attr">"dialect"</span>: <span class="string">"mysql"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"production"</span>: &#123;</div><div class="line">    <span class="attr">"username"</span>: <span class="string">"root"</span>,</div><div class="line">    <span class="attr">"password"</span>: <span class="string">"root"</span>,</div><div class="line">	<span class="attr">"database"</span>: <span class="string">"articles"</span>,</div><div class="line">    <span class="attr">"host"</span>: <span class="string">"127.0.0.1"</span>,</div><div class="line">    <span class="attr">"dialect"</span>: <span class="string">"mysql"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>You can do this in your <code>.env</code> file if you like to follow that pattern. For more info on this see <a href="https://www.npmjs.com/package/dotenv" target="_blank" rel="external"><code>dotenv</code></a>.</p>
<p>After defining the configuration variables, in my <code>models/</code> folder or where I define schema of tables in the database at application level, I create the connection in an <code>index.js</code> file:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> fs        = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">const</span> path      = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="keyword">const</span> Sequelize = <span class="built_in">require</span>(<span class="string">'sequelize'</span>);</div><div class="line"><span class="keyword">const</span> basename  = path.basename(<span class="built_in">module</span>.filename);</div><div class="line"><span class="keyword">const</span> env       = process.env.NODE_ENV || <span class="string">'development'</span>;</div><div class="line"><span class="keyword">const</span> config    = <span class="built_in">require</span>(__dirname + <span class="string">'/config.json'</span>)[env];</div><div class="line"><span class="keyword">const</span> db        = &#123;&#125;;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (config.use_env_variable) &#123;</div><div class="line">  <span class="keyword">const</span> sequelize = <span class="keyword">new</span> Sequelize(process.env[config.use_env_variable]);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="keyword">const</span> sequelize = <span class="keyword">new</span> Sequelize(config.database, config.username, config.password, config);</div><div class="line">&#125;</div><div class="line"></div><div class="line">fs</div><div class="line">  .readdirSync(__dirname)</div><div class="line">  .filter(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> (file.indexOf(<span class="string">'.'</span>) !== <span class="number">0</span>) &amp;&amp; (file !== basename) &amp;&amp; (file.slice(<span class="number">-3</span>) === <span class="string">'.js'</span>);</div><div class="line">  &#125;)</div><div class="line">  .forEach(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> model = sequelize[<span class="string">'import'</span>](path.join(__dirname, file));</div><div class="line">    db[model.name] = model;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.keys(db).forEach(<span class="function">(<span class="params">modelName</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">if</span> (db[modelName].associate) &#123;</div><div class="line">    db[modelName].associate(db);</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">sequelize</div><div class="line">		.authenticate()</div><div class="line">		.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">			<span class="built_in">console</span>.log(<span class="string">'Connection has been established successfully.'</span>);</div><div class="line">		&#125;)</div><div class="line">		.catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</div><div class="line">			<span class="built_in">console</span>.log(<span class="string">'Unable to connect to the database:'</span>, err);</div><div class="line">		&#125;);</div><div class="line"></div><div class="line">db.sequelize = sequelize;</div><div class="line">db.Sequelize = Sequelize;</div><div class="line"></div><div class="line"><span class="comment">// Import Models such that I can use them in the api just by importing 'db'</span></div><div class="line">db.user = <span class="built_in">require</span>(<span class="string">'./user'</span>)(sequelize, Sequelize);</div><div class="line">db.admin = <span class="built_in">require</span>(<span class="string">'./admin'</span>)(sequelize, Sequelize);</div><div class="line">db.articles = <span class="built_in">require</span>(<span class="string">'./articles'</span>)(sequelize, Sequelize);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = db;</div></pre></td></tr></table></figure>
<p>It’s important to notice that I am exposing <code>db</code> object which contains every model/table schema definition and I just have to import the <code>db</code> object to apply operations on specific database tables using it.</p>
<p>This setup can be auto-generated with the help of <a href="https://github.com/sequelize/cli" target="_blank" rel="external">Sequelize CLI</a> tool that helps in bootstrapping a new project in an effective manner (like the above) and handle database migrations directly from the terminal.</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Sequelize is feature rich ORM for Node.js. It has a documentation that at times may not provide direct solutions to your problems but there always Github issues for that. What I like about is its Promise based control flow. Coming from NoSQL background (and using MongoDB), understanding Sequelize really took less time. Most of the query based models are quite similar to that in MongoDB (especially the CRUD operations). I am looking for a brighter, more improved documentation and ease of support from Sequelize.</p>
<hr>
<p>Originally Published on <a href="https://hackernoon.com/getting-started-with-sequelize-for-nodejs-applications-2854c58ffb8c" target="_blank" rel="external">Hackernoon.com</a><br><strong><a href="https://upscri.be/e51a31/" target="_blank" rel="external">Subscribe</a> my Blog for more on JavaScript/Nodejs/Ionic.</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/jIaEOEh.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Introduction-to-ORM&quot;&gt;&lt;a href=&quot;#Introduction-to-ORM&quot; class=&quot;headerlink&quot; title=&quot;Introduction to ORM&quot;&gt;&lt;/a&gt;Introduction to ORM&lt;/h2&gt;&lt;p&gt;ORM or Object Relation Mapping is a process of mapping between objects and relation database systems. An ORM acts like an interface between two system. ORM provide advantages for developers from basic ones like saving time and effort and rather focusing on business logic. The code is robust instead of redundant. ORM helps in managing queries for multiple tables in an effective manner. Lastly, an ORM (like &lt;a href=&quot;http://docs.sequelizejs.com/en/v3/&quot;&gt;sequelize&lt;/a&gt;) is capable to connect with different databases (which comes in handy when switching from one database to another).&lt;/p&gt;
    
    </summary>
    
    
      <category term="nodejs" scheme="http://amandeepmittal.github.io/blog/tags/nodejs/"/>
    
      <category term="mysql" scheme="http://amandeepmittal.github.io/blog/tags/mysql/"/>
    
      <category term="sequelize" scheme="http://amandeepmittal.github.io/blog/tags/sequelize/"/>
    
  </entry>
  
  <entry>
    <title>Atom- An Editor of 21st Century</title>
    <link href="http://amandeepmittal.github.io/blog/2017/05/26/Atom-An-Editor-of-21st-Century/"/>
    <id>http://amandeepmittal.github.io/blog/2017/05/26/Atom-An-Editor-of-21st-Century/</id>
    <published>2017-05-25T18:30:01.000Z</published>
    <updated>2017-05-26T11:53:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://3ulsmb4eg8vz37c0vz2si64j.wpengine.netdna-cdn.com/wp-content/uploads/2015/09/atom.png" alt=""></p>
<p>The <a href="http://atom.io/" target="_blank" rel="external">Atom</a> I am talking about is not a small particle in the world of developers. Built and maintained by Github and the community, it is more than just an editor.</p>
<a id="more"></a>
<p>In our world, in the world of developers, an editor plays an amount of significant role when it comes to writing code. They might seem just a tool, as a matter of fact, they are, but for someone who takes pleasure in writing code, it is an essential piece in their setup.</p>
<p>Using an editor is really a matter of choice, your comfort zone but the game of plugins have a big role to play. As yourself, I have tried my hands on different editors &amp; IDEs and for now I have decide to settle with Atom for its enormous amount of plugins available. Another reason for me is that it’s written in JavaScript (exactly CoffeScript &amp; since I am a JS enthusiast) and is completely free to use because of its open source normality.</p>
<p>It is inspiring to open-source community as well. Few months back, Facebook released there version called <a href="http://nuclide.io/docs/quick-start/getting-started/" target="_blank" rel="external">Nuclide</a> which focus more on mobile development. Then there is <a href="http://electron.atom.io/" target="_blank" rel="external">Electron</a> for building cross-platform desktop application. Both are based on Atom Shell.</p>
<p>Atom is mature in terms of plugins when comes to keeping the pace with newer technologies. When I started out with Node.js, I tried to stick with <a href="https://www.jetbrains.com/webstorm/" target="_blank" rel="external">Webstorm IDE</a> but soon Atom lured me for its support of frameworks like <a href="http://ionicframework.com/" target="_blank" rel="external">Ionic</a> (a plugin called <a href="https://atom.io/packages/ionic-preview" target="_blank" rel="external">Ionic-Preview</a> and I am still exploring) thanks to the community plugins and the other matter of fact that it’s open source.</p>
<p><img src="https://cdn-images-1.medium.com/max/720/1*Fr51xjMu47_6XTgRD5NZRQ.jpeg" alt=""></p>
<h2 id="Packages"><a href="#Packages" class="headerlink" title="Packages"></a>Packages</h2><p>There are more than 4.5k +packages published already. To view, Open the Settings view by clicking <code>Packages &gt; Settings View &gt; Open</code> in the menu bar or by using the (cmd + ,) keyboard shortcut.</p>
<p>Atom Packages are categorized further into:</p>
<ul>
<li>Community packages: Packages written by people outside of GitHub’s Atom team.</li>
<li>Core packages: These are developed by the Atom team and come bundled with Atom but you can disable them if they are no use to you.</li>
<li>Development packages: Packages which you have on your machine and use in Atom from that local source.</li>
</ul>
<p>Core Packages do provide support for most favorable programming/scripting languages but if you are using something out of the box then you must check the Community packages. Chances of finding the one are in your favor there.</p>
<p>If you are still unable to find what you are looking, you should <a href="https://www.sitepoint.com/how-to-write-a-syntax-highlighting-package-for-atom/" target="_blank" rel="external">try developing a package</a> for yourself and then if you like share it with the community.</p>
<h2 id="TIP-Decreasing-Startup-Time"><a href="#TIP-Decreasing-Startup-Time" class="headerlink" title="TIP- Decreasing Startup Time"></a>TIP- Decreasing Startup Time</h2><p>There may come a period of time when your Atom might behave sluggishly. What will you do?</p>
<ul>
<li>You’ll remove all the packages (a.k.a plugins) you don’t use but for some reason you had them installed,</li>
<li>or there isn’t much use of that particular package and you can do without it,</li>
<li>or it was there just for fun. But before removing the packages, one must know which package is consuming how much startup time. You might want some of those unnecessary packages to stay with you if you know they are not the real culprits who are slowing down your development environment.</li>
</ul>
<p><img src="https://cdn-images-1.medium.com/max/720/1*eEGoeeQveSoA4LQPUJ7TOQ.png" alt=""></p>
<p>I have seen (mostly on online forums) some developers groan about this kind of sluggishness but I haven’t met it yet. [<strong>UPDATE</strong> With Atom 1.17.0 -beta release, this sluggishness is almost nulll to feel.]</p>
<h2 id="Recommended-Packages"><a href="#Recommended-Packages" class="headerlink" title="Recommended Packages"></a>Recommended Packages</h2><p>Most of these packages are helpful in my daily JavaScript coding environment. I think they will be helpful to you too.</p>
<ul>
<li><a href="https://atom.io/packages/open-recent" target="_blank" rel="external"><strong>open-recent</strong></a><em>(to continue where you left)</em></li>
<li><a href="https://atom.io/packages/sync-settings" target="_blank" rel="external"><strong>sync-settings</strong></a><em>(do you work more than one machine? This for you)</em></li>
<li><a href="https://atom.io/packages/ionic-preview" target="_blank" rel="external"><strong>Ionic-Preview</strong></a><em>(for people who are working Ionic Framework)</em></li>
<li><a href="https://atom.io/packages/terminal-plus" target="_blank" rel="external"><strong>terminal-plus</strong></a><em>(terminal inside atom)</em></li>
<li><a href="https://atom.io/packages/atom-jade" target="_blank" rel="external"><strong>atom-jade</strong></a> (<em>there is support for</em> <a href="https://atom.io/packages/language-ejs" target="_blank" rel="external"><em>ejs</em></a><em>,</em> <a href="https://atom.io/packages/atom-handlebars" target="_blank" rel="external"><em>handlebars</em></a><em>,</em> <a href="https://atom.io/packages/language-mustache" target="_blank" rel="external"><em>mustache</em></a> <em>too)</em></li>
<li><a href="https://atom.io/packages/jade" target="_blank" rel="external"><strong>jade</strong></a><em>(if you are into jade/<a href="https://pugjs.org/api/getting-started.html" target="_blank" rel="external">pug</a>, this is a snippets package)</em></li>
<li><a href="https://atom.io/packages/js-hyperclick" target="_blank" rel="external"><strong>js-hyperclick</strong></a> <em>(as your project goes bigger, you will get addicted to it)</em></li>
<li><a href="https://atom.io/packages/atom-lupa" target="_blank" rel="external"><strong>atom-lupa</strong></a> <em>(nice one if your daily musings includes React/Angular)</em></li>
<li><a href="https://atom.io/packages/autocomplete-modules" target="_blank" rel="external"><strong>autocomplete-modules</strong></a> <em>(Node.js devs: autocompletes require statements)</em></li>
<li><a href="https://atom.io/packages/atom-pair" target="_blank" rel="external"><strong>atom-pair</strong></a> <em>(developed by the guys at</em> <a href="http://blog.pusher.com" target="_blank" rel="external"><em>Pusher</em></a><em>, a must if you do pair coding)</em></li>
<li><a href="https://atom.io/packages/javascript-snippets" target="_blank" rel="external"><strong>javascript-snippets</strong></a><em>(JavaScript and Node.js snippets)</em></li>
<li><a href="https://atom.io/packages/atom-nodejs-snippets" target="_blank" rel="external"><strong>atom-nodejs-snippets</strong></a><em>(this is another Nodejs &amp; JavaScript snippet package, made by me. Supports ES6 syntax)</em></li>
<li><a href="https://atom.io/packages/linter" target="_blank" rel="external"><strong>linter</strong></a> + <a href="https://atom.io/packages/linter-jshint" target="_blank" rel="external"><strong>linter-jshint</strong></a></li>
<li><a href="https://atom.io/packages/atom-ternjs" target="_blank" rel="external"><strong>atom-ternjs</strong></a> <em>(JavaScript code intelligence for Atom)</em></li>
<li><a href="https://atom.io/packages/encourage" target="_blank" rel="external"><strong>encourage</strong></a> <em>(a nice one to have,</em> <a href="https://medium.freecodecamp.com/learning-to-code-when-it-gets-dark-e485edfb58fd#.1o6f4wmx4" target="_blank" rel="external"><em>if you are having a dark day</em></a><em>, fun)</em></li>
</ul>
<p>The main advantage of an editor like Atom is that you can highly customize it. You can hack it, make your own packages, or use the one that are already there in the community and bend them as per your needs.</p>
<h2 id="Lastly"><a href="#Lastly" class="headerlink" title="Lastly"></a>Lastly</h2><p><img src="https://cdn-images-1.medium.com/max/720/1*mYZtJ4HlZAeJKj-CW0CP7g.jpeg" alt=""></p>
<p>Note: At the time of writing this post, Webstorm IDE did not have support for frameworks like Ionic and the latest Atom Version is 1.8.0.</p>
<hr>
<p><strong>ORIGINALLY PUBLISHED</strong>: July, 14, 2016 <a href="https://medium.com/@amanhimself/atom-an-editor-of-21st-century-d38271362e3" target="_blank" rel="external"><em>here</em></a></p>
<p><em>I haven’t covered all the plugins that I use but what I think are necessary. What about you? I would love to hear about the plugins you use.</em></p>
<hr>
<p><strong>See My Packages for Atom:</strong></p>
<ul>
<li><a href="https://atom.io/packages/jade" target="_blank" rel="external">Jade</a></li>
<li><a href="https://atom.io/packages/atom-nodejs-snippets" target="_blank" rel="external">Nodejs-Snippets</a></li>
<li><a href="https://atom.io/packages/expressjs" target="_blank" rel="external">Expressjs</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://3ulsmb4eg8vz37c0vz2si64j.wpengine.netdna-cdn.com/wp-content/uploads/2015/09/atom.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;http://atom.io/&quot;&gt;Atom&lt;/a&gt; I am talking about is not a small particle in the world of developers. Built and maintained by Github and the community, it is more than just an editor.&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://amandeepmittal.github.io/blog/tags/javascript/"/>
    
      <category term="web development" scheme="http://amandeepmittal.github.io/blog/tags/web-development/"/>
    
      <category term="atom" scheme="http://amandeepmittal.github.io/blog/tags/atom/"/>
    
  </entry>
  
  <entry>
    <title>Concepts in Angularjs</title>
    <link href="http://amandeepmittal.github.io/blog/2017/05/21/Concepts-in-Angularjs/"/>
    <id>http://amandeepmittal.github.io/blog/2017/05/21/Concepts-in-Angularjs/</id>
    <published>2017-05-21T18:16:18.000Z</published>
    <updated>2017-06-12T08:41:44.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/KdhytmU.png" alt=""></p>
<p>AngularJS is a client side web application JavaScript framework, developed by Google that enhances HTML syntax. There are many options available when it comes picking up a client side framework as JavaScript has evolved fast in past two years.</p>
<p>AngularJS 1.x the version we are discussing here, does not supports Mobile applications natively, for more info check <a href="https://hackernoon.com/getting-started-with-ionic-framework-an-overview-6725b687779b" target="_blank" rel="external">Ionic Framework Overview</a>.</p>
<a id="more"></a>
<h2 id="Concepts-in-AngularJS"><a href="#Concepts-in-AngularJS" class="headerlink" title="Concepts in AngularJS"></a>Concepts in AngularJS</h2><p>AngularJS uses HTMl as template language as compared to some other frameworks. It enhances it by providing pre-defined custom HTML elements (in the form directives, and you can build your own custom).</p>
<h3 id="MVW"><a href="#MVW" class="headerlink" title="MVW?"></a>MVW?</h3><p>Angular uses either of MVC (Model-View-Controller) &amp; MVVM(Model-View-View-Model) architectural design patters to develop web applications.</p>
<p><strong>MVC</strong> promotes separation of concerns. In this, the View is separated from the Model through a controller which handles business logic and coordinates model and view. Here, Model represents the business data and View is the representation of that business data.</p>
<h3 id="Two-way-Data-Binding"><a href="#Two-way-Data-Binding" class="headerlink" title="Two-way Data Binding"></a>Two-way Data Binding</h3><p><img src="https://docs.angularjs.org/img/Two_Way_Data_Binding.png" alt=""></p>
<p>This concept provides synchronization between Model and View. It states: changes in Model are reflected in View and changes in View are instantly reflected back in Model.</p>
<p>More info at: <a href="https://docs.angularjs.org/guide/databinding" target="_blank" rel="external">Guide: Two_Way_Data_Binding</a></p>
<h3 id="Directives"><a href="#Directives" class="headerlink" title="Directives"></a>Directives</h3><p>Two words define them: <em>Custom HTML</em>.</p>
<p>They appear in the form of attributes that can be used with normal HTML elements and in the form elements as well. Built in directives are mostly prefixed with <code>ng-</code>.</p>
<p>One most commonly used directive is: <code>ng-app</code> which is used to Bootstrap the application and the name of the application is passed as value.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ng-app="myApp"</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Dependency-Injection"><a href="#Dependency-Injection" class="headerlink" title="Dependency Injection"></a>Dependency Injection</h3><p>It is a software design pattern that deals with how components get hold of their dependencies.</p>
<p>Components such as services, directives, filters, and animations are defined by an injectable factory method or constructor function. These components can be injected with “service” and “value” components as dependencies.</p>
<h3 id="SPA"><a href="#SPA" class="headerlink" title="SPA"></a>SPA</h3><p>SPA stands for Single Page Application in which either all necessary HTML, CSS and JavaScript code is retrieved with a single page load or the appropriate resources are loaded dynamically usually in response to a user request.</p>
<p>To fulfill a user request, Angular responses are managed via AJAX using HTTP verbs: <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code>, in most cases a RESTful API consisting endpoints at backend.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/KdhytmU.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;AngularJS is a client side web application JavaScript framework, developed by Google that enhances HTML syntax. There are many options available when it comes picking up a client side framework as JavaScript has evolved fast in past two years.&lt;/p&gt;
&lt;p&gt;AngularJS 1.x the version we are discussing here, does not supports Mobile applications natively, for more info check &lt;a href=&quot;https://hackernoon.com/getting-started-with-ionic-framework-an-overview-6725b687779b&quot;&gt;Ionic Framework Overview&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="angularjs" scheme="http://amandeepmittal.github.io/blog/tags/angularjs/"/>
    
  </entry>
  
  <entry>
    <title>Modular programming in Angularjs</title>
    <link href="http://amandeepmittal.github.io/blog/2017/05/18/Modular-programming-in-Angularjs/"/>
    <id>http://amandeepmittal.github.io/blog/2017/05/18/Modular-programming-in-Angularjs/</id>
    <published>2017-05-18T17:18:57.000Z</published>
    <updated>2017-05-21T17:34:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/e8vuWgs.png" alt=""></p>
<p>Source code of an angular application can be divided in two ways:</p>
<ul>
<li>by layers</li>
<li>by features</li>
</ul>
<h2 id="Modularization-by-Layers"><a href="#Modularization-by-Layers" class="headerlink" title="Modularization by Layers"></a>Modularization by Layers</h2><p>In this, each type of a component goes into a particular module. The main app module is defined in <code>app.js</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">|--app/</div><div class="line">    |--app.js</div><div class="line">    |--controller.js</div><div class="line">    |--directive.js</div><div class="line">    |--service.js</div><div class="line">|--index.html</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>This type of modularization is useful for small component based applications.</p>
<p>For a larger application, we have:</p>
<h2 id="Modularization-by-Features"><a href="#Modularization-by-Features" class="headerlink" title="Modularization by Features"></a>Modularization by Features</h2><p>In this pattern, different module are declared separately. For example, the application currently has features such as login, signup, &amp; comments. The modularization will be done on the basis of these features: a login module, a signup module, and a comment module.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">|--app/</div><div class="line">    |--img/   #app level images</div><div class="line">    |--css/   #app level stylesheets</div><div class="line">    |--js/   #app level scripts</div><div class="line">    |--app.js   # main module</div><div class="line">    |--modules/</div><div class="line">        |--login/</div><div class="line">            |--js/</div><div class="line">                |--controller.js</div><div class="line">                |--service.js</div><div class="line">            |--css/</div><div class="line">            |--img/</div><div class="line">            |--views/</div><div class="line">            |   |--login.html</div><div class="line">            |--loginModule.js</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/e8vuWgs.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Source code of an angular application can be divided in two ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;by layers&lt;/li&gt;
&lt;li&gt;by features&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Modularization-by-Layers&quot;&gt;&lt;a href=&quot;#Modularization-by-Layers&quot; class=&quot;headerlink&quot; title=&quot;Modularization by Layers&quot;&gt;&lt;/a&gt;Modularization by Layers&lt;/h2&gt;&lt;p&gt;In this, each type of a component goes into a particular module. The main app module is defined in &lt;code&gt;app.js&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;|--app/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    |--app.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    |--controller.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    |--directive.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    |--service.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|--index.html&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="angularjs" scheme="http://amandeepmittal.github.io/blog/tags/angularjs/"/>
    
  </entry>
  
  <entry>
    <title>Setting up MEAN Stack with Webstorm</title>
    <link href="http://amandeepmittal.github.io/blog/2017/05/05/Setting-up-MEAN-Stack-with-Webstorm/"/>
    <id>http://amandeepmittal.github.io/blog/2017/05/05/Setting-up-MEAN-Stack-with-Webstorm/</id>
    <published>2017-05-05T04:30:41.000Z</published>
    <updated>2017-06-08T11:25:55.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/xNQU22c.jpg" alt=""></p>
<p>Ever since I got interested in Node.js and started learning to program in JavaScript, both the programming language and the server side platform have been most relevant to me. Due them, I have made my first PR to an open source project on Github, heck, I even built one of my own using them (<em>see <a href="https://github.com/freeCodeCamp/100DaysOfCode-twitter-bot" target="_blank" rel="external">#100DaysOfCode</a></em>) which currently has more than 6 people actively contributing and enhancing it.</p>
<a id="more"></a>
<p>With Node.js, from quickly building server side application to build fullstack application is not much of a hassle. There are two important solutions to this: MEAN Stack &amp; Meteor.js.</p>
<h2 id="MEAN-Stack"><a href="#MEAN-Stack" class="headerlink" title="MEAN Stack"></a>MEAN Stack</h2><p>MEAN Stack is the used to create complete web development solutions. With JavaScript it’s base, it has lot of advantages to offer and the important of all is one programming language both on server and client side. No context switching. A perfect fullstack solution for me personally.</p>
<p>MEAN is an acronym for MongoDB, ExpressJS, AngularJS, and Node.js. So instead of learning four different programming languages, you just need to know JavaScript.</p>
<h2 id="Setup-MEAN-Stack-in-Webstorm"><a href="#Setup-MEAN-Stack-in-Webstorm" class="headerlink" title="Setup MEAN Stack in Webstorm"></a>Setup MEAN Stack in Webstorm</h2><p>I am sharing a video here which shows on how to get started with MEAN using JetBrain’s Webstorm (<em>A JavaScript IDE</em>) by John Lindquist.</p>
<p><a href="https://www.youtube.com/watch?v=JnMvok0Yks8" target="_blank" rel="external"><img src="https://img.youtube.com/vi/JnMvok0Yks8/0.jpg" alt="Setup MEAN Stack in Webstorm"></a></p>
<hr>
<p><strong><a href="https://upscri.be/e51a31/" target="_blank" rel="external">Subscribe</a> my Blog for more on JavaScript/Nodejs/Ionic.</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/xNQU22c.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Ever since I got interested in Node.js and started learning to program in JavaScript, both the programming language and the server side platform have been most relevant to me. Due them, I have made my first PR to an open source project on Github, heck, I even built one of my own using them (&lt;em&gt;see &lt;a href=&quot;https://github.com/freeCodeCamp/100DaysOfCode-twitter-bot&quot;&gt;#100DaysOfCode&lt;/a&gt;&lt;/em&gt;) which currently has more than 6 people actively contributing and enhancing it.&lt;/p&gt;
    
    </summary>
    
    
      <category term="webstorm" scheme="http://amandeepmittal.github.io/blog/tags/webstorm/"/>
    
      <category term="tips" scheme="http://amandeepmittal.github.io/blog/tags/tips/"/>
    
      <category term="nodejs" scheme="http://amandeepmittal.github.io/blog/tags/nodejs/"/>
    
      <category term="mean stack" scheme="http://amandeepmittal.github.io/blog/tags/mean-stack/"/>
    
  </entry>
  
  <entry>
    <title>How to start using ESLint in Node.js Applications?</title>
    <link href="http://amandeepmittal.github.io/blog/2017/04/28/Eslint-with-Nodejs/"/>
    <id>http://amandeepmittal.github.io/blog/2017/04/28/Eslint-with-Nodejs/</id>
    <published>2017-04-28T09:36:48.000Z</published>
    <updated>2017-06-08T11:25:32.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/7SvpTRp.png" alt=""></p>
<p>ESLint is an open source JavaScript linting utility that help you overcome developer errors as JavaScript is loosely-typed language. There are quite a few options such as JSHint and JSCS in Javascript community for code linting and this post doesn’t suggest that you cannot use them.</p>
<a id="more"></a>
<p>ESLint is designed to have all rules completely pluggable. That’s one of the primary reasons it came into existence. It allows developers to create their own linting rules. Every rule provided in the <a href="http://eslint.org/docs/user-guide" target="_blank" rel="external">ESLint official guide</a> is standalone rule and a developer at any point can decide whether to use a specific rule or not.</p>
<h2 id="Installing"><a href="#Installing" class="headerlink" title="Installing"></a>Installing</h2><p><em>Note</em>: You must have Node.js installed in order to access ESLint via it’s package manager <code>npm</code>.</p>
<p>For local installation to a project directory:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install eslint --save-dev</div></pre></td></tr></table></figure>
<p>For a global installation in your working system:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install eslint -g</div></pre></td></tr></table></figure>
<p>ESLint will now be available via <code>eslint</code> command in your terminal.</p>
<h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><p>Easiest way to configure it to setup a <code>.eslintrc</code> JSON file where are all the linting rules can be described.</p>
<p>An example of <code>.eslintrc</code>:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"env"</span>: &#123;</div><div class="line">    <span class="attr">"node"</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">"browser"</span>: <span class="number">1</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"globals"</span>: &#123;</div><div class="line">    <span class="attr">"exampleGlobalVariable"</span>: <span class="literal">true</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"rules"</span>: &#123;</div><div class="line">    <span class="attr">"eqeqeq"</span>: <span class="number">1</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"plugins"</span>: [</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>If you installed eslint globally, you can also generate config file using</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">eslint --init</div></pre></td></tr></table></figure>
<p>Other case, if you have installed it locally to a project, you will need to type in your terminal:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./node_modules/.bin/eslint --init</div></pre></td></tr></table></figure>
<p>In both cases, you will be prompted with set of basic questions to generate <code>.eslintrc</code> file.</p>
<p><img src="http://i.imgur.com/YxaCZnv.png" alt=""></p>
<p>An example of file generated after above prompt:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"env"</span>: &#123;</div><div class="line">        <span class="attr">"browser"</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">"commonjs"</span>: <span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"extends"</span>: <span class="string">"eslint:recommended"</span>,</div><div class="line">    <span class="attr">"rules"</span>: &#123;</div><div class="line">        <span class="attr">"indent"</span>: [</div><div class="line">            <span class="string">"error"</span>,</div><div class="line">            <span class="string">"tab"</span></div><div class="line">        ],</div><div class="line">        <span class="attr">"linebreak-style"</span>: [</div><div class="line">            <span class="string">"error"</span>,</div><div class="line">            <span class="string">"unix"</span></div><div class="line">        ],</div><div class="line">        <span class="attr">"quotes"</span>: [</div><div class="line">            <span class="string">"error"</span>,</div><div class="line">            <span class="string">"single"</span></div><div class="line">        ],</div><div class="line">        <span class="attr">"semi"</span>: [</div><div class="line">            <span class="string">"error"</span>,</div><div class="line">            <span class="string">"never"</span></div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>For detailed information on Configuration, <a href="http://eslint.org/docs/user-guide/configuring" target="_blank" rel="external">read here</a>.</p>
<h2 id="Rules"><a href="#Rules" class="headerlink" title="Rules"></a>Rules</h2><p>Rules in ESLint are added individually. No rules are enforced by default. You have to specify rules explicitly, then only it will be enabled for the linting process.</p>
<p>You can find a complete list of rules in the <a href="http://eslint.org/docs/rules/" target="_blank" rel="external">official documentation here</a></p>
<p>After deciding which rules to include, you have to set there error levels. Each error level can be defined as following:</p>
<ul>
<li><code>0</code> - Turn the rule off</li>
<li><code>1</code> - Turn the rule on as a warning</li>
<li><code>2</code> - Turn the rule on as an error</li>
</ul>
<p>The difference between an error and a warning is the exit code that eslint will have when it finishes. If any errors are found, eslint will exit with a <code>1</code> exit code, otherwise it will exit with a <code>0</code>. If you are linting within a build step this allows you to control which rules should “break your build” and which ones should be considered as warnings.</p>
<p>Learn how to <a href="http://eslint.org/docs/user-guide/configuring#configuring-rules" target="_blank" rel="external">configure rules in detail here</a>.</p>
<h2 id="Environments"><a href="#Environments" class="headerlink" title="Environments"></a>Environments</h2><p>The code you are writing might be suitable for a particular environment such as, you might be writing a REST API in Node.js application using Express Framework (Sinatra) and the frontend of that application is going to be built in AngularJS. Two different projects, two different environments and both can have separate eslint configurations in one file even though the client and the server are under one project directory that is been considered as root of your project.</p>
<p>How is it done? By setting the environment id to true in the <code>&quot;env&quot;</code> section of <code>.eslintrc</code>.</p>
<h2 id="Linting"><a href="#Linting" class="headerlink" title="Linting"></a>Linting</h2><p>ESLint comes with a command line interface (CLI) to lint your files or directory.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">elsint file.js</div><div class="line">eslint dir/</div></pre></td></tr></table></figure>
<p>The output generated will be grouped by file, and will specify the <code>line:column</code> number, warning/error, reason for the error, and the name of the rule for each failure.</p>
<h2 id="Use-ESLint-with-your-preferred-Coding-Style"><a href="#Use-ESLint-with-your-preferred-Coding-Style" class="headerlink" title="Use ESLint with your preferred Coding Style"></a>Use ESLint with your preferred Coding Style</h2><p>ESLint personally does not promote any coding style. You can setup <code>.eslintrc</code> file to enforce coding style using <a href="http://eslint.org/docs/rules/#stylistic-issues" target="_blank" rel="external">style rules</a> that you like.</p>
<p>You can also use ESLint with Style guides such as <a href="http://standardjs.com/" target="_blank" rel="external">JavaScript Standard Style</a>. You have to use extra plugin for that. The full guide can be found here (<a href="https://github.com/feross/eslint-config-standard" target="_blank" rel="external">https://github.com/feross/eslint-config-standard</a>).</p>
<p>To add a plugin to <code>.eslintrc</code>:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">"plugins": [ "name-of-plugin"]</div></pre></td></tr></table></figure>
<p>Some plugins for popular libraries: <a href="https://www.npmjs.com/package/eslint-plugin-angular" target="_blank" rel="external">Angular</a> | <a href="https://www.npmjs.com/package/eslint-plugin-react" target="_blank" rel="external">React</a></p>
<p>Another plugin, I find very useful is <a href="https://www.npmjs.com/package/eslint-plugin-one-variable-per-var" target="_blank" rel="external">one variable per var</a> just to maintain code consistency over a large/open-source project.</p>
<hr>
<p><strong><a href="https://upscri.be/e51a31/" target="_blank" rel="external">Subscribe</a> my Blog for more on JavaScript/Nodejs/Ionic.</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/7SvpTRp.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;ESLint is an open source JavaScript linting utility that help you overcome developer errors as JavaScript is loosely-typed language. There are quite a few options such as JSHint and JSCS in Javascript community for code linting and this post doesn’t suggest that you cannot use them.&lt;/p&gt;
    
    </summary>
    
    
      <category term="nodejs" scheme="http://amandeepmittal.github.io/blog/tags/nodejs/"/>
    
      <category term="eslint" scheme="http://amandeepmittal.github.io/blog/tags/eslint/"/>
    
      <category term="linting" scheme="http://amandeepmittal.github.io/blog/tags/linting/"/>
    
      <category term="mean stack" scheme="http://amandeepmittal.github.io/blog/tags/mean-stack/"/>
    
  </entry>
  
</feed>
