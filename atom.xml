<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aman Mittal&#39;s Blog</title>
  <subtitle>Node.js Blog</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://amandeepmittal.github.io/blog/"/>
  <updated>2017-05-30T09:59:20.000Z</updated>
  <id>http://amandeepmittal.github.io/blog/</id>
  
  <author>
    <name>Aman Mittal</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Getting Started with Sequelize for Nodejs Applications</title>
    <link href="http://amandeepmittal.github.io/blog/2017/05/30/Getting-Started-with-Sequelize-for-Nodejs-Applications/"/>
    <id>http://amandeepmittal.github.io/blog/2017/05/30/Getting-Started-with-Sequelize-for-Nodejs-Applications/</id>
    <published>2017-05-30T09:37:43.000Z</published>
    <updated>2017-05-30T09:59:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/jIaEOEh.png" alt=""></p>
<h2 id="Introduction-to-ORM"><a href="#Introduction-to-ORM" class="headerlink" title="Introduction to ORM"></a>Introduction to ORM</h2><p>ORM or Object Relation Mapping is a process of mapping between objects and relation database systems. An ORM acts like an interface between two system. ORM provide advantages for developers from basic ones like saving time and effort and rather focusing on business logic. The code is robust instead of redundant. ORM helps in managing queries for multiple tables in an effective manner. Lastly, an ORM (like <a href="http://docs.sequelizejs.com/en/v3/" target="_blank" rel="external">sequelize</a>) is capable to connect with different databases (which comes in handy when switching from one database to another).</p>
<a id="more"></a>
<h2 id="Getting-Started-with-Sequelize"><a href="#Getting-Started-with-Sequelize" class="headerlink" title="Getting Started with Sequelize"></a>Getting Started with Sequelize</h2><p><a href="https://github.com/sequelize/sequelize" target="_blank" rel="external">Sequelize</a> is a promise-based ORM for Node.js. Sequelize is easy to learn and has dozens of cool features like synchronization, association, validation, etc. It also has support for PostgreSQL, MySQL, MariaDB, SQLite, and MSSQL. I am assuming you have some form of SQL database service started on your machine. I am currently using MySQL.</p>
<h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><p>Sequelize is available via npm.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ npm install --save sequelize</div><div class="line"></div><div class="line"># And one of the following:</div><div class="line">$ npm install --save pg pg-hstore</div><div class="line">$ npm install --save mysql // For both mysql and mariadb dialects</div><div class="line">$ npm install --save sqlite3</div><div class="line">$ npm install --save tedious // MSSQL</div></pre></td></tr></table></figure>
<h3 id="Setting-up-a-Connection"><a href="#Setting-up-a-Connection" class="headerlink" title="Setting up a Connection"></a>Setting up a Connection</h3><p>Sequelize does setup a connection between the rest api/application and your SQL database. To setup basic connection between the two:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> sequelize = <span class="keyword">new</span> Sequelize(<span class="string">'database'</span>, <span class="string">'username'</span>, <span class="string">'password'</span>, &#123;</div><div class="line">  <span class="attr">host</span>: <span class="string">'localhost'</span>,</div><div class="line">  <span class="attr">dialect</span>: <span class="string">'mysql'</span>|<span class="string">'mariadb'</span>|<span class="string">'sqlite'</span>|<span class="string">'postgres'</span>|<span class="string">'mssql'</span>,   <span class="comment">//choose anyone between them</span></div><div class="line"></div><div class="line">  <span class="comment">// To create a pool of connections</span></div><div class="line">  pool: &#123;</div><div class="line">    <span class="attr">max</span>: <span class="number">5</span>,</div><div class="line">    <span class="attr">min</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">idle</span>: <span class="number">10000</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// For SQLite only</span></div><div class="line">  storage: <span class="string">'path/to/database.sqlite'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="How-do-I-setup-my-Sequelize-Connection"><a href="#How-do-I-setup-my-Sequelize-Connection" class="headerlink" title="How do I setup my Sequelize Connection?"></a>How do I setup my Sequelize Connection?</h3><p>For the sake brevity, I like to divide code into modules. After all, the Unix philosophy of <a href="https://amandeepmittal.github.io/blog/2017/04/05/The-Node-Way-Philosophy-of-a-Platform/"><em>one  program/module should do one thing</em></a> is major part of the philosophy behind writing code in JavaScript (and using Node.js as a server side platform) these days.</p>
<p>I start with <code>config.json</code>/<code>config.js</code> file in the root of my application/api folder in which I define the general constraints needed to setup the connection with database:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"development"</span>: &#123;</div><div class="line">    <span class="attr">"username"</span>: <span class="string">"root"</span>,</div><div class="line">    <span class="attr">"password"</span>: <span class="string">"root"</span>,</div><div class="line">    <span class="attr">"database"</span>: <span class="string">"articles"</span>,</div><div class="line">    <span class="attr">"host"</span>: <span class="string">"localhost"</span>,</div><div class="line">    <span class="attr">"dialect"</span>: <span class="string">"mysql"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"test"</span>: &#123;</div><div class="line">    <span class="attr">"username"</span>: <span class="string">"root"</span>,</div><div class="line">    <span class="attr">"password"</span>: <span class="string">"root"</span>,</div><div class="line">	<span class="attr">"database"</span>: <span class="string">"articles"</span>,</div><div class="line">    <span class="attr">"host"</span>: <span class="string">"127.0.0.1"</span>,</div><div class="line">    <span class="attr">"dialect"</span>: <span class="string">"mysql"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"production"</span>: &#123;</div><div class="line">    <span class="attr">"username"</span>: <span class="string">"root"</span>,</div><div class="line">    <span class="attr">"password"</span>: <span class="string">"root"</span>,</div><div class="line">	<span class="attr">"database"</span>: <span class="string">"articles"</span>,</div><div class="line">    <span class="attr">"host"</span>: <span class="string">"127.0.0.1"</span>,</div><div class="line">    <span class="attr">"dialect"</span>: <span class="string">"mysql"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>You can do this in your <code>.env</code> file if you like to follow that pattern. For more info on this see <a href="https://www.npmjs.com/package/dotenv" target="_blank" rel="external"><code>dotenv</code></a>.</p>
<p>After defining the configuration variables, in my <code>models/</code> folder or where I define schema of tables in the database at application level, I create the connection in an <code>index.js</code> file:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> fs        = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">const</span> path      = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="keyword">const</span> Sequelize = <span class="built_in">require</span>(<span class="string">'sequelize'</span>);</div><div class="line"><span class="keyword">const</span> basename  = path.basename(<span class="built_in">module</span>.filename);</div><div class="line"><span class="keyword">const</span> env       = process.env.NODE_ENV || <span class="string">'development'</span>;</div><div class="line"><span class="keyword">const</span> config    = <span class="built_in">require</span>(__dirname + <span class="string">'/config.json'</span>)[env];</div><div class="line"><span class="keyword">const</span> db        = &#123;&#125;;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (config.use_env_variable) &#123;</div><div class="line">  <span class="keyword">const</span> sequelize = <span class="keyword">new</span> Sequelize(process.env[config.use_env_variable]);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="keyword">const</span> sequelize = <span class="keyword">new</span> Sequelize(config.database, config.username, config.password, config);</div><div class="line">&#125;</div><div class="line"></div><div class="line">fs</div><div class="line">  .readdirSync(__dirname)</div><div class="line">  .filter(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> (file.indexOf(<span class="string">'.'</span>) !== <span class="number">0</span>) &amp;&amp; (file !== basename) &amp;&amp; (file.slice(<span class="number">-3</span>) === <span class="string">'.js'</span>);</div><div class="line">  &#125;)</div><div class="line">  .forEach(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> model = sequelize[<span class="string">'import'</span>](path.join(__dirname, file));</div><div class="line">    db[model.name] = model;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.keys(db).forEach(<span class="function">(<span class="params">modelName</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">if</span> (db[modelName].associate) &#123;</div><div class="line">    db[modelName].associate(db);</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">sequelize</div><div class="line">		.authenticate()</div><div class="line">		.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">			<span class="built_in">console</span>.log(<span class="string">'Connection has been established successfully.'</span>);</div><div class="line">		&#125;)</div><div class="line">		.catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</div><div class="line">			<span class="built_in">console</span>.log(<span class="string">'Unable to connect to the database:'</span>, err);</div><div class="line">		&#125;);</div><div class="line"></div><div class="line">db.sequelize = sequelize;</div><div class="line">db.Sequelize = Sequelize;</div><div class="line"></div><div class="line"><span class="comment">// Import Models such that I can use them in the api just by importing 'db'</span></div><div class="line">db.user = <span class="built_in">require</span>(<span class="string">'./user'</span>)(sequelize, Sequelize);</div><div class="line">db.admin = <span class="built_in">require</span>(<span class="string">'./admin'</span>)(sequelize, Sequelize);</div><div class="line">db.articles = <span class="built_in">require</span>(<span class="string">'./articles'</span>)(sequelize, Sequelize);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = db;</div></pre></td></tr></table></figure>
<p>It’s important to notice that I am exposing <code>db</code> object which contains every model/table schema definition and I just have to import the <code>db</code> object to apply operations on specific database tables using it.</p>
<p>This setup can be auto-generated with the help of <a href="https://github.com/sequelize/cli" target="_blank" rel="external">Sequelize CLI</a> tool that helps in bootstrapping a new project in an effective manner (like the above) and handle database migrations directly from the terminal.</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Sequelize is feature rich ORM for Node.js. It has a documentation that at times may not provide direct solutions to your problems but there always Github issues for that. What I like about is its Promise based control flow. Coming from NoSQL background (and using MongoDB), understanding Sequelize really took less time. Most of the query based models are quite similar to that in MongoDB (especially the CRUD operations). I am looking for a brighter, more improved documentation and ease of support from Sequelize.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/jIaEOEh.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Introduction-to-ORM&quot;&gt;&lt;a href=&quot;#Introduction-to-ORM&quot; class=&quot;headerlink&quot; title=&quot;Introduction to ORM&quot;&gt;&lt;/a&gt;Introduction to ORM&lt;/h2&gt;&lt;p&gt;ORM or Object Relation Mapping is a process of mapping between objects and relation database systems. An ORM acts like an interface between two system. ORM provide advantages for developers from basic ones like saving time and effort and rather focusing on business logic. The code is robust instead of redundant. ORM helps in managing queries for multiple tables in an effective manner. Lastly, an ORM (like &lt;a href=&quot;http://docs.sequelizejs.com/en/v3/&quot;&gt;sequelize&lt;/a&gt;) is capable to connect with different databases (which comes in handy when switching from one database to another).&lt;/p&gt;
    
    </summary>
    
    
      <category term="nodejs" scheme="http://amandeepmittal.github.io/blog/tags/nodejs/"/>
    
      <category term="MySQL" scheme="http://amandeepmittal.github.io/blog/tags/MySQL/"/>
    
      <category term="sequelize" scheme="http://amandeepmittal.github.io/blog/tags/sequelize/"/>
    
  </entry>
  
  <entry>
    <title>Atom- An Editor of 21st Century</title>
    <link href="http://amandeepmittal.github.io/blog/2017/05/26/Atom-An-Editor-of-21st-Century/"/>
    <id>http://amandeepmittal.github.io/blog/2017/05/26/Atom-An-Editor-of-21st-Century/</id>
    <published>2017-05-25T18:30:01.000Z</published>
    <updated>2017-05-26T11:53:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://3ulsmb4eg8vz37c0vz2si64j.wpengine.netdna-cdn.com/wp-content/uploads/2015/09/atom.png" alt=""></p>
<p>The <a href="http://atom.io/" target="_blank" rel="external">Atom</a> I am talking about is not a small particle in the world of developers. Built and maintained by Github and the community, it is more than just an editor.</p>
<a id="more"></a>
<p>In our world, in the world of developers, an editor plays an amount of significant role when it comes to writing code. They might seem just a tool, as a matter of fact, they are, but for someone who takes pleasure in writing code, it is an essential piece in their setup.</p>
<p>Using an editor is really a matter of choice, your comfort zone but the game of plugins have a big role to play. As yourself, I have tried my hands on different editors &amp; IDEs and for now I have decide to settle with Atom for its enormous amount of plugins available. Another reason for me is that it’s written in JavaScript (exactly CoffeScript &amp; since I am a JS enthusiast) and is completely free to use because of its open source normality.</p>
<p>It is inspiring to open-source community as well. Few months back, Facebook released there version called <a href="http://nuclide.io/docs/quick-start/getting-started/" target="_blank" rel="external">Nuclide</a> which focus more on mobile development. Then there is <a href="http://electron.atom.io/" target="_blank" rel="external">Electron</a> for building cross-platform desktop application. Both are based on Atom Shell.</p>
<p>Atom is mature in terms of plugins when comes to keeping the pace with newer technologies. When I started out with Node.js, I tried to stick with <a href="https://www.jetbrains.com/webstorm/" target="_blank" rel="external">Webstorm IDE</a> but soon Atom lured me for its support of frameworks like <a href="http://ionicframework.com/" target="_blank" rel="external">Ionic</a> (a plugin called <a href="https://atom.io/packages/ionic-preview" target="_blank" rel="external">Ionic-Preview</a> and I am still exploring) thanks to the community plugins and the other matter of fact that it’s open source.</p>
<p><img src="https://cdn-images-1.medium.com/max/720/1*Fr51xjMu47_6XTgRD5NZRQ.jpeg" alt=""></p>
<h2 id="Packages"><a href="#Packages" class="headerlink" title="Packages"></a>Packages</h2><p>There are more than 4.5k +packages published already. To view, Open the Settings view by clicking <code>Packages &gt; Settings View &gt; Open</code> in the menu bar or by using the (cmd + ,) keyboard shortcut.</p>
<p>Atom Packages are categorized further into:</p>
<ul>
<li>Community packages: Packages written by people outside of GitHub’s Atom team.</li>
<li>Core packages: These are developed by the Atom team and come bundled with Atom but you can disable them if they are no use to you.</li>
<li>Development packages: Packages which you have on your machine and use in Atom from that local source.</li>
</ul>
<p>Core Packages do provide support for most favorable programming/scripting languages but if you are using something out of the box then you must check the Community packages. Chances of finding the one are in your favor there.</p>
<p>If you are still unable to find what you are looking, you should <a href="https://www.sitepoint.com/how-to-write-a-syntax-highlighting-package-for-atom/" target="_blank" rel="external">try developing a package</a> for yourself and then if you like share it with the community.</p>
<h2 id="TIP-Decreasing-Startup-Time"><a href="#TIP-Decreasing-Startup-Time" class="headerlink" title="TIP- Decreasing Startup Time"></a>TIP- Decreasing Startup Time</h2><p>There may come a period of time when your Atom might behave sluggishly. What will you do?</p>
<ul>
<li>You’ll remove all the packages (a.k.a plugins) you don’t use but for some reason you had them installed,</li>
<li>or there isn’t much use of that particular package and you can do without it,</li>
<li>or it was there just for fun. But before removing the packages, one must know which package is consuming how much startup time. You might want some of those unnecessary packages to stay with you if you know they are not the real culprits who are slowing down your development environment.</li>
</ul>
<p><img src="https://cdn-images-1.medium.com/max/720/1*eEGoeeQveSoA4LQPUJ7TOQ.png" alt=""></p>
<p>I have seen (mostly on online forums) some developers groan about this kind of sluggishness but I haven’t met it yet. [<strong>UPDATE</strong> With Atom 1.17.0 -beta release, this sluggishness is almost nulll to feel.]</p>
<h2 id="Recommended-Packages"><a href="#Recommended-Packages" class="headerlink" title="Recommended Packages"></a>Recommended Packages</h2><p>Most of these packages are helpful in my daily JavaScript coding environment. I think they will be helpful to you too.</p>
<ul>
<li><a href="https://atom.io/packages/open-recent" target="_blank" rel="external"><strong>open-recent</strong></a><em>(to continue where you left)</em></li>
<li><a href="https://atom.io/packages/sync-settings" target="_blank" rel="external"><strong>sync-settings</strong></a><em>(do you work more than one machine? This for you)</em></li>
<li><a href="https://atom.io/packages/ionic-preview" target="_blank" rel="external"><strong>Ionic-Preview</strong></a><em>(for people who are working Ionic Framework)</em></li>
<li><a href="https://atom.io/packages/terminal-plus" target="_blank" rel="external"><strong>terminal-plus</strong></a><em>(terminal inside atom)</em></li>
<li><a href="https://atom.io/packages/atom-jade" target="_blank" rel="external"><strong>atom-jade</strong></a> (<em>there is support for</em> <a href="https://atom.io/packages/language-ejs" target="_blank" rel="external"><em>ejs</em></a><em>,</em> <a href="https://atom.io/packages/atom-handlebars" target="_blank" rel="external"><em>handlebars</em></a><em>,</em> <a href="https://atom.io/packages/language-mustache" target="_blank" rel="external"><em>mustache</em></a> <em>too)</em></li>
<li><a href="https://atom.io/packages/jade" target="_blank" rel="external"><strong>jade</strong></a><em>(if you are into jade/<a href="https://pugjs.org/api/getting-started.html" target="_blank" rel="external">pug</a>, this is a snippets package)</em></li>
<li><a href="https://atom.io/packages/js-hyperclick" target="_blank" rel="external"><strong>js-hyperclick</strong></a> <em>(as your project goes bigger, you will get addicted to it)</em></li>
<li><a href="https://atom.io/packages/atom-lupa" target="_blank" rel="external"><strong>atom-lupa</strong></a> <em>(nice one if your daily musings includes React/Angular)</em></li>
<li><a href="https://atom.io/packages/autocomplete-modules" target="_blank" rel="external"><strong>autocomplete-modules</strong></a> <em>(Node.js devs: autocompletes require statements)</em></li>
<li><a href="https://atom.io/packages/atom-pair" target="_blank" rel="external"><strong>atom-pair</strong></a> <em>(developed by the guys at</em> <a href="http://blog.pusher.com" target="_blank" rel="external"><em>Pusher</em></a><em>, a must if you do pair coding)</em></li>
<li><a href="https://atom.io/packages/javascript-snippets" target="_blank" rel="external"><strong>javascript-snippets</strong></a><em>(JavaScript and Node.js snippets)</em></li>
<li><a href="https://atom.io/packages/atom-nodejs-snippets" target="_blank" rel="external"><strong>atom-nodejs-snippets</strong></a><em>(this is another Nodejs &amp; JavaScript snippet package, made by me. Supports ES6 syntax)</em></li>
<li><a href="https://atom.io/packages/linter" target="_blank" rel="external"><strong>linter</strong></a> + <a href="https://atom.io/packages/linter-jshint" target="_blank" rel="external"><strong>linter-jshint</strong></a></li>
<li><a href="https://atom.io/packages/atom-ternjs" target="_blank" rel="external"><strong>atom-ternjs</strong></a> <em>(JavaScript code intelligence for Atom)</em></li>
<li><a href="https://atom.io/packages/encourage" target="_blank" rel="external"><strong>encourage</strong></a> <em>(a nice one to have,</em> <a href="https://medium.freecodecamp.com/learning-to-code-when-it-gets-dark-e485edfb58fd#.1o6f4wmx4" target="_blank" rel="external"><em>if you are having a dark day</em></a><em>, fun)</em></li>
</ul>
<p>The main advantage of an editor like Atom is that you can highly customize it. You can hack it, make your own packages, or use the one that are already there in the community and bend them as per your needs.</p>
<h2 id="Lastly"><a href="#Lastly" class="headerlink" title="Lastly"></a>Lastly</h2><p><img src="https://cdn-images-1.medium.com/max/720/1*mYZtJ4HlZAeJKj-CW0CP7g.jpeg" alt=""></p>
<p>Note: At the time of writing this post, Webstorm IDE did not have support for frameworks like Ionic and the latest Atom Version is 1.8.0.</p>
<hr>
<p><strong>ORIGINALLY PUBLISHED</strong>: July, 14, 2016 <a href="https://medium.com/@amanhimself/atom-an-editor-of-21st-century-d38271362e3" target="_blank" rel="external"><em>here</em></a></p>
<p><em>I haven’t covered all the plugins that I use but what I think are necessary. What about you? I would love to hear about the plugins you use.</em></p>
<hr>
<p><strong>See My Packages for Atom:</strong></p>
<ul>
<li><a href="https://atom.io/packages/jade" target="_blank" rel="external">Jade</a></li>
<li><a href="https://atom.io/packages/atom-nodejs-snippets" target="_blank" rel="external">Nodejs-Snippets</a></li>
<li><a href="https://atom.io/packages/expressjs" target="_blank" rel="external">Expressjs</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://3ulsmb4eg8vz37c0vz2si64j.wpengine.netdna-cdn.com/wp-content/uploads/2015/09/atom.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;http://atom.io/&quot;&gt;Atom&lt;/a&gt; I am talking about is not a small particle in the world of developers. Built and maintained by Github and the community, it is more than just an editor.&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://amandeepmittal.github.io/blog/tags/javascript/"/>
    
      <category term="web development" scheme="http://amandeepmittal.github.io/blog/tags/web-development/"/>
    
      <category term="atom" scheme="http://amandeepmittal.github.io/blog/tags/atom/"/>
    
  </entry>
  
  <entry>
    <title>Concepts in Angularjs</title>
    <link href="http://amandeepmittal.github.io/blog/2017/05/21/Concepts-in-Angularjs/"/>
    <id>http://amandeepmittal.github.io/blog/2017/05/21/Concepts-in-Angularjs/</id>
    <published>2017-05-21T18:16:18.000Z</published>
    <updated>2017-05-21T18:18:07.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/KdhytmU.png" alt=""></p>
<p>AngularJS is a client side web application JavaScript framework, developed by Google that enhances HTML syntax. There are many options available when it comes picking up a client side framework as JavaScript has evolved fast in past two years.</p>
<p>AngularJS 1.x the version we are discussing here, does not supports Mobile applications natively, for more info check <a href="https://hackernoon.com/getting-started-with-ionic-framework-an-overview-6725b687779b" target="_blank" rel="external">Ionic Framework Overview</a>.</p>
<a id="more"></a>
<h2 id="Concepts-in-AngularJS"><a href="#Concepts-in-AngularJS" class="headerlink" title="Concepts in AngularJS"></a>Concepts in AngularJS</h2><p>AngularJS uses HTMl as template language as compared to some other frameworks. It enhances it by providing pre-defined custom HTML elements (in the form directives, and you can build your own custom).</p>
<h3 id="MVW"><a href="#MVW" class="headerlink" title="MVW?"></a>MVW?</h3><p>Angular uses either of MVC (Model-View-Controller) &amp; MVVM(Model-View-View-Model) architectural design patters to develop web applications.</p>
<p><strong>MVC</strong> promotes separation of concerns. In this, the View is separated from the Model through a controller which handles business logic and coordinates model and view. Here, Model represents the business data and View is the representation of that business data.</p>
<h3 id="Two-way-Data-Binding"><a href="#Two-way-Data-Binding" class="headerlink" title="Two-way Data Binding"></a>Two-way Data Binding</h3><p><img src="https://docs.angularjs.org/img/Two_Way_Data_Binding.png" alt=""></p>
<p>This concept provides synchronization between Model and View. It states: changes in Model are reflected in View and changes in View are instantly reflected back in Model.</p>
<p>More info at: <a href="https://docs.angularjs.org/guide/databinding" target="_blank" rel="external">Guide: Two_Way_Data_Binding</a></p>
<h3 id="Directives"><a href="#Directives" class="headerlink" title="Directives"></a>Directives</h3><p>Two words define them: <em>Custom HTML</em>.</p>
<p>They appear in the form of attributes that can be used with normal HTML elements and in the form elements as well. Built in directives are mostly prefixed with <code>ng-</code>.</p>
<p>One most commonly used directive is: <code>ng-app</code> which is used to Bootstrap the application and the name of the application is passed as value.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ng-app="myApp"</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Dependency-Injection"><a href="#Dependency-Injection" class="headerlink" title="Dependency Injection"></a>Dependency Injection</h3><p>It is a software design pattern that deals with how components get hold of their dependencies.</p>
<p>Components such as services, directives, filters, and animations are defined by an injectable factory method or constructor function. These components can be injected with “service” and “value” components as dependencies.</p>
<h3 id="SPA"><a href="#SPA" class="headerlink" title="SPA"></a>SPA</h3><p>SPA stands for Single Page Application in which either all necessary HTML, CSS and JavaScript code is retrieved with a single page load or the appropriate resources are loaded dynamically usually in response to a user request.</p>
<p>To fulfill a user request, Angular responses are managed via AJAX using HTTP verbs: GET, POST, PUT, DELETE, in most cases a RESTful API consisting endpoints at backend.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/KdhytmU.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;AngularJS is a client side web application JavaScript framework, developed by Google that enhances HTML syntax. There are many options available when it comes picking up a client side framework as JavaScript has evolved fast in past two years.&lt;/p&gt;
&lt;p&gt;AngularJS 1.x the version we are discussing here, does not supports Mobile applications natively, for more info check &lt;a href=&quot;https://hackernoon.com/getting-started-with-ionic-framework-an-overview-6725b687779b&quot;&gt;Ionic Framework Overview&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="angularjs" scheme="http://amandeepmittal.github.io/blog/tags/angularjs/"/>
    
  </entry>
  
  <entry>
    <title>Modular programming in Angularjs</title>
    <link href="http://amandeepmittal.github.io/blog/2017/05/18/Modular-programming-in-Angularjs/"/>
    <id>http://amandeepmittal.github.io/blog/2017/05/18/Modular-programming-in-Angularjs/</id>
    <published>2017-05-18T17:18:57.000Z</published>
    <updated>2017-05-21T17:34:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/e8vuWgs.png" alt=""></p>
<p>Source code of an angular application can be divided in two ways:</p>
<ul>
<li>by layers</li>
<li>by features</li>
</ul>
<h2 id="Modularization-by-Layers"><a href="#Modularization-by-Layers" class="headerlink" title="Modularization by Layers"></a>Modularization by Layers</h2><p>In this, each type of a component goes into a particular module. The main app module is defined in <code>app.js</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">|--app/</div><div class="line">    |--app.js</div><div class="line">    |--controller.js</div><div class="line">    |--directive.js</div><div class="line">    |--service.js</div><div class="line">|--index.html</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>This type of modularization is useful for small component based applications.</p>
<p>For a larger application, we have:</p>
<h2 id="Modularization-by-Features"><a href="#Modularization-by-Features" class="headerlink" title="Modularization by Features"></a>Modularization by Features</h2><p>In this pattern, different module are declared separately. For example, the application currently has features such as login, signup, &amp; comments. The modularization will be done on the basis of these features: a login module, a signup module, and a comment module.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">|--app/</div><div class="line">    |--img/   #app level images</div><div class="line">    |--css/   #app level stylesheets</div><div class="line">    |--js/   #app level scripts</div><div class="line">    |--app.js   # main module</div><div class="line">    |--modules/</div><div class="line">        |--login/</div><div class="line">            |--js/</div><div class="line">                |--controller.js</div><div class="line">                |--service.js</div><div class="line">            |--css/</div><div class="line">            |--img/</div><div class="line">            |--views/</div><div class="line">            |   |--login.html</div><div class="line">            |--loginModule.js</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/e8vuWgs.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Source code of an angular application can be divided in two ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;by layers&lt;/li&gt;
&lt;li&gt;by features&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Modularization-by-Layers&quot;&gt;&lt;a href=&quot;#Modularization-by-Layers&quot; class=&quot;headerlink&quot; title=&quot;Modularization by Layers&quot;&gt;&lt;/a&gt;Modularization by Layers&lt;/h2&gt;&lt;p&gt;In this, each type of a component goes into a particular module. The main app module is defined in &lt;code&gt;app.js&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;|--app/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    |--app.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    |--controller.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    |--directive.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    |--service.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|--index.html&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="angularjs" scheme="http://amandeepmittal.github.io/blog/tags/angularjs/"/>
    
  </entry>
  
  <entry>
    <title>Setting up MEAN Stack with Webstorm</title>
    <link href="http://amandeepmittal.github.io/blog/2017/05/05/Setting-up-MEAN-Stack-with-Webstorm/"/>
    <id>http://amandeepmittal.github.io/blog/2017/05/05/Setting-up-MEAN-Stack-with-Webstorm/</id>
    <published>2017-05-05T04:30:41.000Z</published>
    <updated>2017-05-21T17:54:34.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/xNQU22c.jpg" alt=""></p>
<p>Ever since I got interested in Node.js and started learning to program in JavaScript, both the programming language and the server side platform have been most relevant to me. Due them, I have made my first PR to an open source project on Github, heck, I even built one of my own using them (<em>see <a href="https://github.com/freeCodeCamp/100DaysOfCode-twitter-bot" target="_blank" rel="external">#100DaysOfCode</a></em>) which currently has more than 6 people actively contributing and enhancing it.</p>
<a id="more"></a>
<p>With Node.js, from quickly building server side application to build fullstack application is not much of a hassle. There are two important solutions to this: MEAN Stack &amp; Meteor.js.</p>
<h2 id="MEAN-Stack"><a href="#MEAN-Stack" class="headerlink" title="MEAN Stack"></a>MEAN Stack</h2><p>MEAN Stack is the used to create complete web development solutions. With JavaScript it’s base, it has lot of advantages to offer and the important of all is one programming language both on server and client side. No context switching. A perfect fullstack solution for me personally.</p>
<p>MEAN is an acronym for MongoDB, ExpressJS, AngularJS, and Node.js. So instead of learning four different programming languages, you just need to know JavaScript.</p>
<h2 id="Setup-MEAN-Stack-in-Webstorm"><a href="#Setup-MEAN-Stack-in-Webstorm" class="headerlink" title="Setup MEAN Stack in Webstorm"></a>Setup MEAN Stack in Webstorm</h2><p>I am sharing a video here which shows on how to get started with MEAN using JetBrain’s Webstorm (<em>A JavaScript IDE</em>) by John Lindquist.</p>
<p><a href="https://www.youtube.com/watch?v=JnMvok0Yks8" target="_blank" rel="external"><img src="https://img.youtube.com/vi/JnMvok0Yks8/0.jpg" alt="Setup MEAN Stack in Webstorm"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/xNQU22c.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Ever since I got interested in Node.js and started learning to program in JavaScript, both the programming language and the server side platform have been most relevant to me. Due them, I have made my first PR to an open source project on Github, heck, I even built one of my own using them (&lt;em&gt;see &lt;a href=&quot;https://github.com/freeCodeCamp/100DaysOfCode-twitter-bot&quot;&gt;#100DaysOfCode&lt;/a&gt;&lt;/em&gt;) which currently has more than 6 people actively contributing and enhancing it.&lt;/p&gt;
    
    </summary>
    
    
      <category term="nodejs" scheme="http://amandeepmittal.github.io/blog/tags/nodejs/"/>
    
      <category term="mean stack" scheme="http://amandeepmittal.github.io/blog/tags/mean-stack/"/>
    
      <category term="webstorm" scheme="http://amandeepmittal.github.io/blog/tags/webstorm/"/>
    
      <category term="tips" scheme="http://amandeepmittal.github.io/blog/tags/tips/"/>
    
  </entry>
  
  <entry>
    <title>How to start using ESLint in Node.js Applications?</title>
    <link href="http://amandeepmittal.github.io/blog/2017/04/28/Eslint-with-Nodejs/"/>
    <id>http://amandeepmittal.github.io/blog/2017/04/28/Eslint-with-Nodejs/</id>
    <published>2017-04-28T09:36:48.000Z</published>
    <updated>2017-05-21T17:32:57.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/7SvpTRp.png" alt=""></p>
<p>ESLint is an open source JavaScript linting utility that help you overcome developer errors as JavaScript is loosely-typed language. There are quite a few options such as JSHint and JSCS in Javascript community for code linting and this post doesn’t suggest that you cannot use them.</p>
<a id="more"></a>
<p>ESLint is designed to have all rules completely pluggable. That’s one of the primary reasons it came into existence. It allows developers to create their own linting rules. Every rule provided in the <a href="http://eslint.org/docs/user-guide" target="_blank" rel="external">ESLint official guide</a> is standalone rule and a developer at any point can decide whether to use a specific rule or not.</p>
<h2 id="Installing"><a href="#Installing" class="headerlink" title="Installing"></a>Installing</h2><p><em>Note</em>: You must have Node.js installed in order to access ESLint via it’s package manager <code>npm</code>.</p>
<p>For local installation to a project directory:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install eslint --save-dev</div></pre></td></tr></table></figure>
<p>For a global installation in your working system:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install eslint -g</div></pre></td></tr></table></figure>
<p>ESLint will now be available via <code>eslint</code> command in your terminal.</p>
<h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><p>Easiest way to configure it to setup a <code>.eslintrc</code> JSON file where are all the linting rules can be described.</p>
<p>An example of <code>.eslintrc</code>:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"env"</span>: &#123;</div><div class="line">    <span class="attr">"node"</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">"browser"</span>: <span class="number">1</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"globals"</span>: &#123;</div><div class="line">    <span class="attr">"exampleGlobalVariable"</span>: <span class="literal">true</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"rules"</span>: &#123;</div><div class="line">    <span class="attr">"eqeqeq"</span>: <span class="number">1</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"plugins"</span>: [</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>If you installed eslint globally, you can also generate config file using</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">eslint --init</div></pre></td></tr></table></figure>
<p>Other case, if you have installed it locally to a project, you will need to type in your terminal:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./node_modules/.bin/eslint --init</div></pre></td></tr></table></figure>
<p>In both cases, you will be prompted with set of basic questions to generate <code>.eslintrc</code> file.</p>
<p><img src="http://i.imgur.com/YxaCZnv.png" alt=""></p>
<p>An example of file generated after above prompt:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"env"</span>: &#123;</div><div class="line">        <span class="attr">"browser"</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">"commonjs"</span>: <span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"extends"</span>: <span class="string">"eslint:recommended"</span>,</div><div class="line">    <span class="attr">"rules"</span>: &#123;</div><div class="line">        <span class="attr">"indent"</span>: [</div><div class="line">            <span class="string">"error"</span>,</div><div class="line">            <span class="string">"tab"</span></div><div class="line">        ],</div><div class="line">        <span class="attr">"linebreak-style"</span>: [</div><div class="line">            <span class="string">"error"</span>,</div><div class="line">            <span class="string">"unix"</span></div><div class="line">        ],</div><div class="line">        <span class="attr">"quotes"</span>: [</div><div class="line">            <span class="string">"error"</span>,</div><div class="line">            <span class="string">"single"</span></div><div class="line">        ],</div><div class="line">        <span class="attr">"semi"</span>: [</div><div class="line">            <span class="string">"error"</span>,</div><div class="line">            <span class="string">"never"</span></div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>For detailed information on Configuration, <a href="http://eslint.org/docs/user-guide/configuring" target="_blank" rel="external">read here</a>.</p>
<h2 id="Rules"><a href="#Rules" class="headerlink" title="Rules"></a>Rules</h2><p>Rules in ESLint are added individually. No rules are enforced by default. You have to specify rules explicitly, then only it will be enabled for the linting process.</p>
<p>You can find a complete list of rules in the <a href="http://eslint.org/docs/rules/" target="_blank" rel="external">official documentation here</a></p>
<p>After deciding which rules to include, you have to set there error levels. Each error level can be defined as following:</p>
<ul>
<li><code>0</code> - Turn the rule off</li>
<li><code>1</code> - Turn the rule on as a warning</li>
<li><code>2</code> - Turn the rule on as an error</li>
</ul>
<p>The difference between an error and a warning is the exit code that eslint will have when it finishes. If any errors are found, eslint will exit with a <code>1</code> exit code, otherwise it will exit with a <code>0</code>. If you are linting within a build step this allows you to control which rules should “break your build” and which ones should be considered as warnings.</p>
<p>Learn how to <a href="http://eslint.org/docs/user-guide/configuring#configuring-rules" target="_blank" rel="external">configure rules in detail here</a>.</p>
<h2 id="Environments"><a href="#Environments" class="headerlink" title="Environments"></a>Environments</h2><p>The code you are writing might be suitable for a particular environment such as, you might be writing a REST API in Node.js application using Express Framework (Sinatra) and the frontend of that application is going to be built in AngularJS. Two different projects, two different environments and both can have separate eslint configurations in one file even though the client and the server are under one project directory that is been considered as root of your project.</p>
<p>How is it done? By setting the environment id to true in the <code>&quot;env&quot;</code> section of <code>.eslintrc</code>.</p>
<h2 id="Linting"><a href="#Linting" class="headerlink" title="Linting"></a>Linting</h2><p>ESLint comes with a command line interface (CLI) to lint your files or directory.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">elsint file.js</div><div class="line">eslint dir/</div></pre></td></tr></table></figure>
<p>The output generated will be grouped by file, and will specify the <code>line:column</code> number, warning/error, reason for the error, and the name of the rule for each failure.</p>
<h2 id="Use-ESLint-with-your-preferred-Coding-Style"><a href="#Use-ESLint-with-your-preferred-Coding-Style" class="headerlink" title="Use ESLint with your preferred Coding Style"></a>Use ESLint with your preferred Coding Style</h2><p>ESLint personally does not promote any coding style. You can setup <code>.eslintrc</code> file to enforce coding style using <a href="http://eslint.org/docs/rules/#stylistic-issues" target="_blank" rel="external">style rules</a> that you like.</p>
<p>You can also use ESLint with Style guides such as <a href="http://standardjs.com/" target="_blank" rel="external">JavaScript Standard Style</a>. You have to use extra plugin for that. The full guide can be found here (<a href="https://github.com/feross/eslint-config-standard" target="_blank" rel="external">https://github.com/feross/eslint-config-standard</a>).</p>
<p>To add a plugin to <code>.eslintrc</code>:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">"plugins": [ "name-of-plugin"]</div></pre></td></tr></table></figure>
<p>Some plugins for popular libraries: <a href="https://www.npmjs.com/package/eslint-plugin-angular" target="_blank" rel="external">Angular</a> | <a href="https://www.npmjs.com/package/eslint-plugin-react" target="_blank" rel="external">React</a></p>
<p>Another plugin, I find very useful is <a href="https://www.npmjs.com/package/eslint-plugin-one-variable-per-var" target="_blank" rel="external">one variable per var</a> just to maintain code consistency over a large/open-source project.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/7SvpTRp.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;ESLint is an open source JavaScript linting utility that help you overcome developer errors as JavaScript is loosely-typed language. There are quite a few options such as JSHint and JSCS in Javascript community for code linting and this post doesn’t suggest that you cannot use them.&lt;/p&gt;
    
    </summary>
    
    
      <category term="eslint" scheme="http://amandeepmittal.github.io/blog/tags/eslint/"/>
    
      <category term="nodejs" scheme="http://amandeepmittal.github.io/blog/tags/nodejs/"/>
    
      <category term="linting" scheme="http://amandeepmittal.github.io/blog/tags/linting/"/>
    
      <category term="mean stack" scheme="http://amandeepmittal.github.io/blog/tags/mean-stack/"/>
    
  </entry>
  
  <entry>
    <title>How Node.js Works?</title>
    <link href="http://amandeepmittal.github.io/blog/2017/04/19/How-Node-js-Works/"/>
    <id>http://amandeepmittal.github.io/blog/2017/04/19/How-Node-js-Works/</id>
    <published>2017-04-19T05:54:37.000Z</published>
    <updated>2017-05-21T17:34:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn-images-1.medium.com/max/720/1*dTYKv5fII4doUAqJSA51Qg.png" alt=""></p>
<p>When I started learning Node.js I always wondered, how does it work? How is it inside Node.js? Event loop and Event Queue jargons are digested. But what exactly is going on? Where do those jargons Event Loop and Event Queue come from.To satisfy my curiosity as well to know the answer to my previous question, I went in depth as much as I can and came across some things which I’d like to share with you. In brief, this article is about <strong>Node.js System</strong> — a glimpse of internal workings of Node.</p>
<a id="more"></a>
<p>If you are familiar with Node.js, it is a known fact that Node.js is single threaded. If you are from programming/computer science background you know what a thread means. Consider this scenario: traditionally — an I/O request comes to a web server and is assigned to an available thread, and for each concurrent connection there is one thread available. That request is handled on the specific thread until it is fulfilled and the response is sent.</p>
<p>This scenario is a perfect example of <strong>Blocking</strong> I/O because while handling a particular request by a specific thread, there will be some idle time when the operations are being done (such as retrieving a file, opening it, reading it, etc.). A single thread consumes memory. A longer running thread for each connection and then sitting idly for some amount of time is not considered an efficient way in the world of <a href="https://amandeepmittal.github.io/blog/2017/04/05/The-Node-Way-Philosophy-of-a-Platform/">Node.js</a>.</p>
<h2 id="Enter-Reactor-Pattern-Heart-of-Node-js"><a href="#Enter-Reactor-Pattern-Heart-of-Node-js" class="headerlink" title="Enter Reactor Pattern- Heart of Node.js"></a>Enter Reactor Pattern- Heart of Node.js</h2><p><strong>Reactor Pattern</strong> is an idea of non-blocking I/O operations in Node.js. This pattern provides a handler(in case of Node.js, a callback function) that is associated with each I/O operation. When an I/O request is generated, it is submitted to a demultiplexer.</p>
<p>This demultiplexer is a notification interface that is used to handle concurrency in <em>non-blocking I/O</em> mode and collects every request in form of an event and queues each event in a queue. Thus, the demultiplexer provides the <strong>Event Queue</strong>, which we often hear. When a request is collected by the demultiplexer, it returns the control back to the system and does not blocks the I/O. At the same time, there is an <strong>Event Loop</strong> which iterates over the items in the Event Queue. Every event has a callback function associated with it, and that callback function is invoked when the Event Loop iterates.</p>
<p>The callback function further mostly have other callbacks associated within representing some asynchronous operations. These operations are inserted in the Event Queue by the demultiplexer and are ready to be processed once the Event Loop iterates over them. That is why calls to other operations must be asynchronous.</p>
<p>When all the items in the Event Queue are processed and there are no pending operations left, Node.js terminates the application automatically.</p>
<h2 id="Building-Blocks-of-Node-js"><a href="#Building-Blocks-of-Node-js" class="headerlink" title="Building Blocks of Node.js"></a>Building Blocks of Node.js</h2><ul>
<li>Reactor Pattern</li>
<li>libuv</li>
<li>A set of Bindings</li>
<li>Chrome’s V8</li>
<li>Core JS Library</li>
</ul>
<h3 id="libuv"><a href="#libuv" class="headerlink" title="libuv"></a>libuv</h3><p>Pronounced as “lib u v”, is library written in C language to make Node.js compatible with every OS and provide the non-blocking I/O behaviour. <a href="http://docs.libuv.org/en/v1.x/" target="_blank" rel="external">libuv</a> is a low-level engine that implements reactor pattern thus providing an API for creating the Event Loop, managing an Event Queue and running asynchronous I/O operations. It is built specifically to provide a unified experience over different Operating Systems.</p>
<h3 id="Need-for-libuv"><a href="#Need-for-libuv" class="headerlink" title="Need for libuv?"></a>Need for libuv?</h3><p>Each operating system has its own interface for the demultiplexer. Such as <a href="https://en.wikipedia.org/wiki/Kqueue" target="_blank" rel="external">Kqueue</a> for Mac OS X, <a href="https://en.wikipedia.org/wiki/Input/output_completion_port" target="_blank" rel="external">IOCP</a> for Windows and <a href="https://en.wikipedia.org/wiki/Epoll" target="_blank" rel="external">Epoll</a> for Linux. Different multiplexers will behave differently when handling an I/O request. And then, each I/O operation can differ in its behaviour within the same operating system. This creates an inconsistency and to overcome this inconsistency <em>libuv</em> is the solution.</p>
<p><em>I am not going to talk about internal workings of libuv here, not an expert on that, myself. For more info on libuv check their <a href="http://docs.libuv.org/" target="_blank" rel="external">docs</a> or this <a href="http://www.slideshare.net/saghul/libuv-nodejs-and-everything-in-between" target="_blank" rel="external">slide</a> by Saúl Ibarra Corretgé <a href="https://twitter.com/saghul" target="_blank" rel="external">(@saghul)</a> is a good start.</em></p>
<p><a href="https://github.com/libuv/libuv" target="_blank" rel="external">Also, libuv is independently maintained by awesome developers.</a></p>
<h3 id="Set-of-Bindings"><a href="#Set-of-Bindings" class="headerlink" title="Set of Bindings"></a>Set of Bindings</h3><p>These set of bindings are responsible for wrapping and exposing libuv and other low-level functionality to JavaScript.</p>
<h3 id="V8"><a href="#V8" class="headerlink" title="V8"></a>V8</h3><p>It’s a <a href="https://developers.google.com/v8/" target="_blank" rel="external">runtime engine developed by Google for Chrome</a> browser for JavaScript. It is the reason Node.js is fast and efficient.</p>
<h3 id="Core-Library"><a href="#Core-Library" class="headerlink" title="Core Library"></a>Core Library</h3><p>This is a JavaScript library that implements high-level Node.js API <a href="https://nodejs.org/dist/latest-v6.x/docs/api/" target="_blank" rel="external">(a.k.a. node-core)</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/720/1*dTYKv5fII4doUAqJSA51Qg.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;When I started learning Node.js I always wondered, how does it work? How is it inside Node.js? Event loop and Event Queue jargons are digested. But what exactly is going on? Where do those jargons Event Loop and Event Queue come from.To satisfy my curiosity as well to know the answer to my previous question, I went in depth as much as I can and came across some things which I’d like to share with you. In brief, this article is about &lt;strong&gt;Node.js System&lt;/strong&gt; — a glimpse of internal workings of Node.&lt;/p&gt;
    
    </summary>
    
    
      <category term="nodejs" scheme="http://amandeepmittal.github.io/blog/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Modules in Angularjs</title>
    <link href="http://amandeepmittal.github.io/blog/2017/04/14/Modules-in-Angularjs/"/>
    <id>http://amandeepmittal.github.io/blog/2017/04/14/Modules-in-Angularjs/</id>
    <published>2017-04-14T06:50:12.000Z</published>
    <updated>2017-05-21T17:34:42.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/KdhytmU.png" alt=""></p>
<p>Modules are essential part of developing an AngularJS application. Modules provide resusability of code. A module in AngularJS act as a container that holds/groups different components.</p>
<a id="more"></a>
<h2 id="Creating-a-simple-Module"><a href="#Creating-a-simple-Module" class="headerlink" title="Creating a simple Module"></a>Creating a simple Module</h2><p><code>angular.module</code> function is used to create a module whenever necessary. The first argument is always the module name and the second argument is an array that specifies additional modules upon which are current module depends.</p>
<p>If there’s no dependency, pass an empty array</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// module with no dependency</span></div><div class="line">angular.module(<span class="string">'moduleA'</span>, []);</div><div class="line"></div><div class="line"><span class="comment">// module with dependencies</span></div><div class="line">angular.module(<span class="string">'moduleB'</span>, [<span class="string">'moduleA'</span>, <span class="string">'moduleC'</span>]);</div></pre></td></tr></table></figure>
<p>After creating a module, different components are bind with it.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myModule = angular.module(<span class="string">'moduleA'</span>, []);</div><div class="line"></div><div class="line">myModule.controller(...);</div><div class="line"></div><div class="line">myModule.service(...);</div></pre></td></tr></table></figure>
<p>The above code creates a new module and attaches two components with it: a controller, and a directive. It also declares a global variable <code>myModule</code> in the JavaScript global namespace. Imagine a large app with vast amount of global variables like this. To avoid this situation of populating JavaScript global namespace, we can declare the whole code inside an IIFE.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> myModule = angular.module(<span class="string">'moduleA'</span>, []);</div><div class="line"></div><div class="line">  myModule.controller(...);</div><div class="line"></div><div class="line">  myModule.service(...);</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="comment">// myModule is undefined here</span></div></pre></td></tr></table></figure>
<p>This function will execute as soon as it’s declared.</p>
<p>There’s alternative procedure in which IIFE can be avoided, and is simple. Call the Angular Module with a single argument. When an angular module is called with a single argument, it retrieves the already created module and returns it.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'moduleA'</span>, []);</div><div class="line"></div><div class="line">angular.module(<span class="string">'firstModule'</span>).controller(...);</div><div class="line">angular.module(<span class="string">'firstModule'</span>).directive(...);</div></pre></td></tr></table></figure>
<p>Alternatively, to avoid boilerplate, components such as controllers and directives can be chained with the module declaration.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'moduleA'</span>, [])     <span class="comment">// notice no semicolon</span></div><div class="line">.controller(...)</div><div class="line">.directive(...);                <span class="comment">// notice the semicolon</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/KdhytmU.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Modules are essential part of developing an AngularJS application. Modules provide resusability of code. A module in AngularJS act as a container that holds/groups different components.&lt;/p&gt;
    
    </summary>
    
    
      <category term="angularjs" scheme="http://amandeepmittal.github.io/blog/tags/angularjs/"/>
    
  </entry>
  
  <entry>
    <title>The Node Way: Philosophy of a Platform</title>
    <link href="http://amandeepmittal.github.io/blog/2017/04/05/The-Node-Way-Philosophy-of-a-Platform/"/>
    <id>http://amandeepmittal.github.io/blog/2017/04/05/The-Node-Way-Philosophy-of-a-Platform/</id>
    <published>2017-04-05T13:01:29.000Z</published>
    <updated>2017-05-21T17:41:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn-images-1.medium.com/max/720/1*7xUxphx7WwttvlFu5gVvVw.png" alt=""><br>Last week, when <a href="https://nodejs.org/en/blog/" target="_blank" rel="external">Node.js</a> community introduced its logo, it got me into thinking of why this technology as fresh in my mind as when I was first introduced to it a few months back. Why is that spark still ignited in the back of my head? The answer to this is the philosophy behind the technology of Node.js platform.</p>
<a id="more"></a>
<p>Every platform has its own philosophy, its own set of rules, its own principles and guidelines. This is necessary for the evolution of a platform and is important for developing an application using that platform. (Otherwise, we all can get carried away.) Node.js has its own philosophy, since its a platform, and it manages to find a middleground between JavaScript and UNIX.</p>
<p>Two of the most important principles of UNIX that are adaptable in Node.js are:</p>
<ul>
<li>Modularity, keeping simple parts short, connected with clean interfaces.</li>
<li>A program should do one thing and it should do that awesomely.</li>
</ul>
<p>Other rules described by Eric Steven Raymond in <a href="http://www.catb.org/esr/writings/taoup/html/index.html" target="_blank" rel="external">The Art of UNIX Programming</a> might fit to some extent but the two aforementioned are necessary to use Node.js pragmatically.</p>
<p>In Node.js this pragmaticism is provided the by a <strong>‘module’</strong>. A module is the fundamental to structure the code of a program in Node.js. Module is also the building block of a package. (A package is any application or reusable libraries).</p>
<p>The principle here is to design small modules in terms of code and in terms of application scope. This principle provides:</p>
<ul>
<li>reusability of code</li>
<li>easier to understand the code</li>
<li>thus, making it simple to test and maintain</li>
</ul>
<p>Another important aspect in the Node Philosophy is the dependency of each package. Writing a Node.js application, one tends to use a lot of packages <em>(which is the genesis of Node.js Ecosystem: npm)</em> and this might create a common problem known as: dependency hell. To overcome this conflict, Node.js manages dependencies of each installed package to have its own separate set of dependencies.</p>
<hr>
<p><strong>ORIGINALLY PUBLISHED</strong> at Medium.com on March 10, 2016.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/720/1*7xUxphx7WwttvlFu5gVvVw.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;Last week, when &lt;a href=&quot;https://nodejs.org/en/blog/&quot;&gt;Node.js&lt;/a&gt; community introduced its logo, it got me into thinking of why this technology as fresh in my mind as when I was first introduced to it a few months back. Why is that spark still ignited in the back of my head? The answer to this is the philosophy behind the technology of Node.js platform.&lt;/p&gt;
    
    </summary>
    
    
      <category term="nodejs" scheme="http://amandeepmittal.github.io/blog/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Code Conventions</title>
    <link href="http://amandeepmittal.github.io/blog/2017/04/03/JavaScript-Code-Conventions/"/>
    <id>http://amandeepmittal.github.io/blog/2017/04/03/JavaScript-Code-Conventions/</id>
    <published>2017-04-03T17:31:43.000Z</published>
    <updated>2017-05-21T17:34:21.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/D4i0LcT.jpg" alt=""><br>This article is about coding conventions. Everywhere I read good/better/awesome articles but very few seem to talk about the the basic things in programming.</p>
<a id="more"></a>
<p>Like the coding conventions used by programmers in their work. I am a JavaScript enthusiast and never once did I came across a good article on basic conventions and guidelines to write code that is helpful for me and others to read my code.<br>Thus, this is my attempt and this article contains some general coding conventions as well as some specific guidelines only applicable to JavaScript.</p>
<p>Thus, this is my attempt and this article contains some general coding conventions as well as some specific guidelines only applicable to <strong>JavaScript</strong>.</p>
<h2 id="So-what-are-Code-Conventions"><a href="#So-what-are-Code-Conventions" class="headerlink" title="So what are Code Conventions?"></a>So what are Code Conventions?</h2><p>These are the guidelines about programming practices, file and directory structure and commenting.</p>
<p>Now you may be wondering why do you need guidelines as for files and directory structure? Well, to keep simple and when working in a team you have to follow some rules for a specific file structure for that application. Otherwise it will be huge mess.</p>
<h2 id="Style-Guidelines"><a href="#Style-Guidelines" class="headerlink" title="Style Guidelines"></a>Style Guidelines</h2><p>They are the type of <strong>Code Convention</strong> that includes the layout of code within a file.</p>
<h3 id="Indentation"><a href="#Indentation" class="headerlink" title="Indentation"></a>Indentation</h3><p>The first thing to do when writing code in a file is how to handle <strong>indentation</strong>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(num===<span class="number">1</span>)&#123;</div><div class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;array.length;i++)&#123;</div><div class="line">    <span class="keyword">if</span>(array[i]!==<span class="number">0</span>)&#123;</div><div class="line">      <span class="comment">//some code</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(array[i]===array.length)&#123;</div><div class="line">      <span class="comment">// code</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Observe in the previous example there is a flow. This is what an indentation is all about. It makes the program readable. The <em>else if</em> statement is used for the if statement inside the <em>for loop</em> and not the outside <em>if</em> statement.</p>
<p>Two ways to achieve indentation:</p>
<ul>
<li>using tabs</li>
<li>using spaces</li>
</ul>
<p><strong>Using Tabs</strong><br>For each indentation level, use one tab character. Thus, the second level will have two tab characters and so on.</p>
<p><strong>Using Space</strong><br>Each indentation level is made up of multiple spaces. The levels contains spaces in pairs, like two spaces for first level, and four spaces for second level and so on.</p>
<p>The <strong>advantage</strong> of using spaces over tabs is that all text editors are configured according to spaces and is treated exactly the same. The <strong>disadvantage</strong> here is to put spaces in each line. Thankfully, we are in an era where text editors are smart enough and they automatically do indentation.</p>
<h3 id="Avoid-ASI-Automatic-Semicolon-Insertion"><a href="#Avoid-ASI-Automatic-Semicolon-Insertion" class="headerlink" title="Avoid ASI Automatic Semicolon Insertion"></a>Avoid ASI Automatic Semicolon Insertion</h3><p>Avoiding semicolons is possible and if JavaScript has a mechanism called ASI, why the hell to care about semicolons? If you are comfortable with ASI carry on. But the rules of ASI are complex and using your time with in writing code rather than worrying about ASI is better.</p>
<p>It causes errors and sometimes things won’t work because the JavaScript parser may read things different from the way they are written.</p>
<p>Also, semicolons improves the readability of the code for other programmers too. If you are working collaboratively, it’s a great help.</p>
<h3 id="Avoid-Horizontal-Scrolling"><a href="#Avoid-Horizontal-Scrolling" class="headerlink" title="Avoid Horizontal Scrolling"></a>Avoid Horizontal Scrolling</h3><p>The recommended length of code in a line is 80 characters. Even though the text editors have become smart, the length of 80 characters has is still used as a convention.</p>
<h3 id="Blank-Lines-are-not-harmful"><a href="#Blank-Lines-are-not-harmful" class="headerlink" title="Blank Lines are not harmful"></a>Blank Lines are not harmful</h3><p>Using blank lines to separate unrelated lines of code. It improves readability.</p>
<p>Without blank lines:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(num===<span class="number">1</span>)&#123;</div><div class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;array.length;i++)&#123;</div><div class="line">    <span class="keyword">if</span>(array[i]!==<span class="number">0</span>)&#123;</div><div class="line">      <span class="comment">//some code</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(array[i]===array.length)&#123;</div><div class="line">      <span class="comment">// code</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>With blank lines:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">if(num===1)&#123;</div><div class="line">  for(i=0;i&lt;array.length;i++)&#123;</div><div class="line">    if(array[i]!==0)&#123;</div><div class="line">      //some code</div><div class="line">    &#125;</div><div class="line">    else if(array[i]===array.length)&#123;</div><div class="line">      // code</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Naming-Convention"><a href="#Naming-Convention" class="headerlink" title="Naming Convention"></a>Naming Convention</h3><p>ECMAScript uses camelCase convention. You should too when naming Variables and Functions. And try to use meaningful names for those variables and functions and keep them short.</p>
<h4 id="Function-Naming"><a href="#Function-Naming" class="headerlink" title="Function Naming"></a>Function Naming</h4><p>In JS, all we do is make functions in form of callbacks andevents. Author of <em>Maintainable Javascript</em> <strong>Nicholas Zakas</strong> introduces some common conventions for functions. I find these helpful:</p>
<ul>
<li>can Function that returns a boolean</li>
<li>has Function that returns a boolean</li>
<li>is Function that returns a boolean</li>
<li>get Function that returns a nonboolean</li>
<li>set Function that is used to save a value</li>
</ul>
<h4 id="Constructors"><a href="#Constructors" class="headerlink" title="Constructors"></a>Constructors</h4><p>Constructors are functions too and are used to create objects via new operator. But avoid using <em>camelCase</em> and use <em>PascalCase</em> instead.</p>
<p>It is helpful since JavaScript uses the same for naming pre-defined constructors.</p>
<h3 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a>Comments</h3><p>For single-line comments, I observed this when using JSHint, after // use a space between them(the two slashes) and the comment.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Single-Line Comment</span></div></pre></td></tr></table></figure>
<blockquote><p>Following all conventions of can be hard and a stressful matter at times when you are focusing on the logic part of the code. Thus, there is an alternative which works for me most of the time, is the Beautify package that I use in the text editor Atom and I am sure it is available for the majority of other text editors.</p>
</blockquote>
<a href="https://upscri.be/e51a31/" target="_blank" rel="external">Subscribe to my newsletter</a>
<p><strong>ORIGINALLY PUBLISHED</strong> at Medium.com on January 8, 2016.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/D4i0LcT.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;This article is about coding conventions. Everywhere I read good/better/awesome articles but very few seem to talk about the the basic things in programming.&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://amandeepmittal.github.io/blog/tags/javascript/"/>
    
  </entry>
  
</feed>
