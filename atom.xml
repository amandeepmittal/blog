<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aman Mittal&#39;s Blog</title>
  <subtitle>Node.js Blog</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://amandeepmittal.github.io/blog/"/>
  <updated>2017-04-05T13:03:44.000Z</updated>
  <id>http://amandeepmittal.github.io/blog/</id>
  
  <author>
    <name>Aman Mittal</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>The Node Way: Philosophy of a Platform</title>
    <link href="http://amandeepmittal.github.io/blog/2017/04/05/The-Node-Way-Philosophy-of-a-Platform/"/>
    <id>http://amandeepmittal.github.io/blog/2017/04/05/The-Node-Way-Philosophy-of-a-Platform/</id>
    <published>2017-04-05T13:01:29.000Z</published>
    <updated>2017-04-05T13:03:44.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn-images-1.medium.com/max/720/1*7xUxphx7WwttvlFu5gVvVw.png" alt=""><br>Last week, when <a href="https://nodejs.org/en/blog/" target="_blank" rel="external">Node.js</a> community introduced its logo, it got me into thinking of why this technology as fresh in my mind as when I was first introduced to it a few months back. Why is that spark still ignited in the back of my head? The answer to this is the philosophy behind the technology of Node.js platform.</p>
<a id="more"></a>
<p>Every platform has its own philosophy, its own set of rules, its own principles and guidelines. This is necessary for the evolution of a platform and is important for developing an application using that platform. (Otherwise, we all can get carried away.) Node.js has its own philosophy, since its a platform, and it manages to find a middleground between JavaScript and UNIX.</p>
<p>Two of the most important principles of UNIX that are adaptable in Node.js are:</p>
<ul>
<li>Modularity, keeping simple parts short, connected with clean interfaces.</li>
<li>A program should do one thing and it should do that awesomely.</li>
</ul>
<p>Other rules described by Eric Steven Raymond in <a href="http://www.catb.org/esr/writings/taoup/html/index.html" target="_blank" rel="external">The Art of UNIX Programming</a> might fit to some extent but the two aforementioned are necessary to use Node.js pragmatically.</p>
<p>In Node.js this pragmaticism is provided the by a <strong>‘module’</strong>. A module is the fundamental to structure the code of a program in Node.js. Module is also the building block of a package. (A package is any application or reusable libraries).</p>
<p>The principle here is to design small modules in terms of code and in terms of application scope. This principle provides:</p>
<ul>
<li>reusability of code</li>
<li>easier to understand the code</li>
<li>thus, making it simple to test and maintain</li>
</ul>
<p>Another important aspect in the Node Philosophy is the dependency of each package. Writing a Node.js application, one tends to use a lot of packages <em>(which is the genesis of Node.js Ecosystem: npm)</em> and this might create a common problem known as: dependency hell. To overcome this conflict, Node.js manages dependencies of each installed package to have its own separate set of dependencies.</p>
<p><strong>ORIGINALLY PUBLISHED</strong> at Medium.com on March 10, 2016.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/720/1*7xUxphx7WwttvlFu5gVvVw.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;Last week, when &lt;a href=&quot;https://nodejs.org/en/blog/&quot;&gt;Node.js&lt;/a&gt; community introduced its logo, it got me into thinking of why this technology as fresh in my mind as when I was first introduced to it a few months back. Why is that spark still ignited in the back of my head? The answer to this is the philosophy behind the technology of Node.js platform.&lt;/p&gt;
    
    </summary>
    
    
      <category term="nodejs" scheme="http://amandeepmittal.github.io/blog/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Code Conventions</title>
    <link href="http://amandeepmittal.github.io/blog/2017/04/03/JavaScript-Code-Conventions/"/>
    <id>http://amandeepmittal.github.io/blog/2017/04/03/JavaScript-Code-Conventions/</id>
    <published>2017-04-03T17:31:43.000Z</published>
    <updated>2017-04-05T13:03:42.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/D4i0LcT.jpg" alt=""><br>This article is about coding conventions. Everywhere I read good/better/awesome articles but very few seem to talk about the the basic things in programming.</p>
<a id="more"></a>
<p>Like the coding conventions used by programmers in their work. I am a JavaScript enthusiast and never once did I came across a good article on basic conventions and guidelines to write code that is helpful for me and others to read my code.<br>Thus, this is my attempt and this article contains some general coding conventions as well as some specific guidelines only applicable to JavaScript.</p>
<p>Thus, this is my attempt and this article contains some general coding conventions as well as some specific guidelines only applicable to <strong>JavaScript</strong>.</p>
<h2 id="So-what-are-Code-Conventions"><a href="#So-what-are-Code-Conventions" class="headerlink" title="So what are Code Conventions?"></a>So what are Code Conventions?</h2><p>These are the guidelines about programming practices, file and directory structure and commenting.</p>
<p>Now you may be wondering why do you need guidelines as for files and directory structure? Well, to keep simple and when working in a team you have to follow some rules for a specific file structure for that application. Otherwise it will be huge mess.</p>
<h2 id="Style-Guidelines"><a href="#Style-Guidelines" class="headerlink" title="Style Guidelines"></a>Style Guidelines</h2><p>They are the type of <strong>Code Convention</strong> that includes the layout of code within a file.</p>
<h3 id="Indentation"><a href="#Indentation" class="headerlink" title="Indentation"></a>Indentation</h3><p>The first thing to do when writing code in a file is how to handle <strong>indentation</strong>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(num===<span class="number">1</span>)&#123;</div><div class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;array.length;i++)&#123;</div><div class="line">    <span class="keyword">if</span>(array[i]!==<span class="number">0</span>)&#123;</div><div class="line">      <span class="comment">//some code</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(array[i]===array.length)&#123;</div><div class="line">      <span class="comment">// code</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Observe in the previous example there is a flow. This is what an indentation is all about. It makes the program readable. The <em>else if</em> statement is used for the if statement inside the <em>for loop</em> and not the outside <em>if</em> statement.</p>
<p>Two ways to achieve indentation:</p>
<ul>
<li>using tabs</li>
<li>using spaces</li>
</ul>
<p><strong>Using Tabs</strong><br>For each indentation level, use one tab character. Thus, the second level will have two tab characters and so on.</p>
<p><strong>Using Space</strong><br>Each indentation level is made up of multiple spaces. The levels contains spaces in pairs, like two spaces for first level, and four spaces for second level and so on.</p>
<p>The <strong>advantage</strong> of using spaces over tabs is that all text editors are configured according to spaces and is treated exactly the same. The <strong>disadvantage</strong> here is to put spaces in each line. Thankfully, we are in an era where text editors are smart enough and they automatically do indentation.</p>
<h3 id="Avoid-ASI-Automatic-Semicolon-Insertion"><a href="#Avoid-ASI-Automatic-Semicolon-Insertion" class="headerlink" title="Avoid ASI Automatic Semicolon Insertion"></a>Avoid ASI Automatic Semicolon Insertion</h3><p>Avoiding semicolons is possible and if JavaScript has a mechanism called ASI, why the hell to care about semicolons? If you are comfortable with ASI carry on. But the rules of ASI are complex and using your time with in writing code rather than worrying about ASI is better.</p>
<p>It causes errors and sometimes things won’t work because the JavaScript parser may read things different from the way they are written.</p>
<p>Also, semicolons improves the readability of the code for other programmers too. If you are working collaboratively, it’s a great help.</p>
<h3 id="Avoid-Horizontal-Scrolling"><a href="#Avoid-Horizontal-Scrolling" class="headerlink" title="Avoid Horizontal Scrolling"></a>Avoid Horizontal Scrolling</h3><p>The recommended length of code in a line is 80 characters. Even though the text editors have become smart, the length of 80 characters has is still used as a convention.</p>
<h3 id="Blank-Lines-are-not-harmful"><a href="#Blank-Lines-are-not-harmful" class="headerlink" title="Blank Lines are not harmful"></a>Blank Lines are not harmful</h3><p>Using blank lines to separate unrelated lines of code. It improves readability.</p>
<p>Without blank lines:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(num===<span class="number">1</span>)&#123;</div><div class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;array.length;i++)&#123;</div><div class="line">    <span class="keyword">if</span>(array[i]!==<span class="number">0</span>)&#123;</div><div class="line">      <span class="comment">//some code</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(array[i]===array.length)&#123;</div><div class="line">      <span class="comment">// code</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>With blank lines:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">if(num===1)&#123;</div><div class="line">  for(i=0;i&lt;array.length;i++)&#123;</div><div class="line">    if(array[i]!==0)&#123;</div><div class="line">      //some code</div><div class="line">    &#125;</div><div class="line">    else if(array[i]===array.length)&#123;</div><div class="line">      // code</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Naming-Convention"><a href="#Naming-Convention" class="headerlink" title="Naming Convention"></a>Naming Convention</h3><p>ECMAScript uses camelCase convention. You should too when naming Variables and Functions. And try to use meaningful names for those variables and functions and keep them short.</p>
<h4 id="Function-Naming"><a href="#Function-Naming" class="headerlink" title="Function Naming"></a>Function Naming</h4><p>In JS, all we do is make functions in form of callbacks andevents. Author of <em>Maintainable Javascript</em> <strong>Nicholas Zakas</strong> introduces some common conventions for functions. I find these helpful:</p>
<ul>
<li>can Function that returns a boolean</li>
<li>has Function that returns a boolean</li>
<li>is Function that returns a boolean</li>
<li>get Function that returns a nonboolean</li>
<li>set Function that is used to save a value</li>
</ul>
<h4 id="Constructors"><a href="#Constructors" class="headerlink" title="Constructors"></a>Constructors</h4><p>Constructors are functions too and are used to create objects via new operator. But avoid using <em>camelCase</em> and use <em>PascalCase</em> instead.</p>
<p>It is helpful since JavaScript uses the same for naming pre-defined constructors.</p>
<h3 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a>Comments</h3><p>For single-line comments, I observed this when using JSHint, after // use a space between them(the two slashes) and the comment.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Single-Line Comment</span></div></pre></td></tr></table></figure>
<blockquote><p>Following all conventions of can be hard and a stressful matter at times when you are focusing on the logic part of the code. Thus, there is an alternative which works for me most of the time, is the Beautify package that I use in the text editor Atom and I am sure it is available for the majority of other text editors.</p>
</blockquote>
<a href="https://upscri.be/e51a31/" target="_blank" rel="external">Subscribe to my newsletter</a>
<p><strong>ORIGINALLY PUBLISHED</strong> at Medium.com on January 8, 2016.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/D4i0LcT.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;This article is about coding conventions. Everywhere I read good/better/awesome articles but very few seem to talk about the the basic things in programming.&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://amandeepmittal.github.io/blog/tags/javascript/"/>
    
  </entry>
  
</feed>
